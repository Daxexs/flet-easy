{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Home","text":"<p>Flet-Easy is a package created as a Flet add-on, designed to be easy to use with a cleaner order in the code, having many customizable features. </p>"},{"location":"Basic-JWT/","title":"Basic JWT","text":"<p>JWT is a standard for securely transmitting data between parties in JSON format. It is composed of three parts: the header, the payload and the signature. It is commonly used for authentication and authorization in web applications and API services. JWTs are compact, self-contained and easy to use in distributed environments.</p> <p>Flet Easy contains a basic integration to use JWT in a simple and fast way, by integrating JWT in the app you can configure user session time, as well as an automatic session expiration. In order to add JWT we will need the following configurations.</p> <p>In the <code>FletEasy</code> class we must configure the following parameters:</p> <ul> <li>The value of <code>auto_logout</code> is false by default (closes session automatically).</li> <li>To configure the secret_key it is necessary to use the <code>SecretKey</code> class of <code>FletEasy</code>.</li> </ul>"},{"location":"Basic-JWT/#algorithm-hs256","title":"Algorithm HS256","text":"main.py<pre><code>import flet_easy  as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n        algorithm=fs.Algorithm.HS256,\n        secret=SECRET_KEY\n        ),\n    auto_logout=True,  # Activates the automatic closing of the session.\n)\n</code></pre>"},{"location":"Basic-JWT/#algorithm-rs256","title":"Algorithm RS256","text":"<p>Info</p> <p>To use the <code>RS256</code> algorithm You must have the <code>cryptographic</code> library installed.</p> main.py<pre><code>import flet_easy  as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n       algorithm=fs.Algorithm.RS256,\n       pem_key=fs.PemKey(private=PRIVATE_KEY, public=PUBLIC_KEY)\n    ),\n    auto_logout=True,  # Activates the automatic closing of the session.\n)\n</code></pre>"},{"location":"Basic-JWT/#get-secret_key","title":"Get secret_key","text":"<p>FletEasy provides a class called <code>EasyKey</code> to easily get a secret_key to use, then we can copy it to a file or use it as environment variables.</p> <pre><code>import flet_easy as fs\n\nkey = fs.EasyKey()\n\n# --- HS256\nSECRET_KEY = key.secret_key()\n\n# --- RS256\nPRIVATE_KEY = key.private_key()\nPUBLIC_KEY = key.public_key()\n</code></pre>"},{"location":"Basic-JWT/#how-to-use-it","title":"How to use it","text":"<p>After having configured the <code>secret_key</code>, we can start configuring the use of JWT. For this we are going to require the use of the <code>login</code> method of <code>Datasy</code> (data), it will be used as normally we would use it without using JWT, but we will use the <code>time_expiry</code> and <code>value</code> parameter that will have to be a dictionary obligatorily.</p> <ul> <li>More details of the <code>login</code> method</li> <li>More details of the <code>logout</code> method</li> </ul>"},{"location":"Basic-JWT/#example","title":"Example","text":"sensitive.py<pre><code>SECRET_KEY = \"7dbd00fd8ba528257c641b7c5c411cb5abdca774d348d36a3af86f644b132382a3f3f71361fd4e19d2d2dcbcee6f2769af84cbe372a3a5b9db35d3d2707e1d0a\"\n\nPUBLIC_KEY = \"\"\"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmSNxQBBYOJEJD+XIDDBXK1qxUTpSsiybrtdvZH30f6G1o1MNsj17\nJjexf2ub7GO0J3TbDz4+dkEtVciG5cOG+bJ2RR2+09yIm3MC5xdRB12DaexU6EGd\nEzbrZFiOxurzL3SSXzaABo/5DoLjk+eEF9YHhnnmoCjuAaV195PQ1Bkrn6h6kTpP\nMtpJ5UIMVAFrtNNXPcii4P6ESn00kxcL55daVoKpyuC2hOiZFn9uQHoUrrtNGJGi\nil6JjJPWWr/PU3RKdf++/QNsoJ2Erkob1FWz16+lIhJ2fsK6Qai6K0mXUqTPF5Hl\n/Pi7zyw81fAgLE3bOdzVJAbBkMqKRvR9nQIDAQAB\n-----END RSA PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIIEqQIBAAKCAQEAmSNxQBBYOJEJD+XIDDBXK1qxUTpSsiybrtdvZH30f6G1o1MN\nsj17Jjexf2ub7GO0J3TbDz4+dkEtVciG5cOG+bJ2RR2+09yIm3MC5xdRB12DaexU\n6EGdEzbrZFiOxurzL3SSXzaABo/5DoLjk+eEF9YHhnnmoCjuAaV195PQ1Bkrn6h6\nkTpPMtpJ5UIMVAFrtNNXPcii4P6ESn00kxcL55daVoKpyuC2hOiZFn9uQHoUrrtN\nGJGiil6JjJPWWr/PU3RKdf++/QNsoJ2Erkob1FWz16+lIhJ2fsK6Qai6K0mXUqTP\nF5Hl/Pi7zyw81fAgLE3bOdzVJAbBkMqKRvR9nQIDAQABAoIBAQCCRZNGw2C5JjBG\nVNvb+pd86xbimbHVnnsFvoElRLzkgmUpPjLtiL2lYkVdtuYaryqHUjI0AmhSYtm1\nGvQeqzm8WqOf4lD+m6GeU7WJbt1gXZ24UvJb7c04lkSixW8YKrCbkxgdZRh9/KYL\nQS9mF9HYERuvuy2E26wXWIwBJjQoB9BJpM6LA2+Pwb6Bygc6e/UOq981+BAY3bbq\nPvRxfLk60xWLmtrS/O9HdGB0vNEvznG6X0+/v0a7Qv8AGd/sSU6cgowF+gyCwG9u\n9uj7X6mEfNw5ZDUvJnH6wWRWfu+zeW4e18lA4GYiQwwXyciDey5T+RI/d4HgNyLn\nh2SHLFmlAoGJALkDoPdvIUyuKkfe6zl2w1FV2uYF4RLdU9O632zI7Ts4dYnhJxkT\nQOdjJaBFSEBwz7YdgMP8ZAWhOEfB582Bkt99mn7Q4YtARMnx44/Ex2CKN6jXr6OS\np8jxIuOfCd/rpMFVz0+SiqS7yWcTPdSbLPWFAu6KeYvfLMEHzi+Ah7r1UEk2k4HW\nL+MCeQDT5O5460PFcZP+hSIsGT/mW5ChRmZS/7/ZB0zJQ9nB/SGtgD/AwAgusHRb\n9+DherSehCHWcahRzDONy+UDXxuVzwSSweD4HJCG7tPykGDxEQmhSY56pShaAp1t\n+u0UWD+Sn6jpEEsZzNsjaxCyzCMwem2Xrt5HFH8CgYgPRohsxYUnUp31Dye2t+KK\nfZ80LLoXl6SLL7uwvKoxoIi72JYk0N0j/aCmqfG8OFQ+AhOWmukbOeNusUjVQ+R/\nhVxTKiXlHGpRjiIuxZ18kAzmaOB8jehCg/5Qctoa3dbdi5sxQ7UkwshvNTx+qE0+\n/DtwvIgqj0OfsGhKrb8HJaf6U4I8TxXnAnhVh/VSzfR/QIdyl57hmheXDqLk1pv7\nKMzx9+Zg34iIq3rqo/gX/+vNnOB7NyWJHpTF36QhAaPl0L2GoSUCJWPnJrc73hLH\nVBBqxwC6yti2th/jAOQIUZ5mJuQRPtZv/ec7ckMmQLNv6KcUNuV4proVmXWfYrDK\nlFUCgYg62k/vLCnHlnl7PwMb9BJAVyxuWPjihhfKJx3i371/iQn+bHD86PnsfRUO\nBfJI9TjPn2k1r+R4AxSzFOr0ZwmusjfyklzJS77wAaAaH9xvfEFLCqtbfZv+w3oh\nKzuz8LYM/PJmIWIBTo2mqDwp/Iv2EbMKw0Jjn0cgnZINs9UciQqhxX4R49I3\n-----END RSA PRIVATE KEY-----\"\"\"\n</code></pre> <p>In this example we are going to do very similar with the <code>Route-protection</code> example, we have only configured the secret_key, used the <code>login</code> method <code>time_expiry</code> parameter and used the <code>decode</code> function of <code>FletEasy</code> to get the payload stored in the decoded client storage.</p> main.py<pre><code>from datetime import timedelta\n\nimport flet as ft\nimport flet_easy as fs\nfrom sensitive import SECRET_KEY\n\ndb = []\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n        algorithm=fs.Algorithm.HS256,\n        secret=SECRET_KEY\n        ),\n    auto_logout=True,  # Activates the automatic closing of the session.\n)\n\n@app.login\ndef login_x(data: fs.Datasy):\n    # decode payload\n    value = fs.decode(key_login=\"login\", data=data)\n\n    print(\"value:\", value)\n\n    # We verify if the username that is stored in the browser is in the simulated database.\n    if not value:\n        return False\n    elif value.get(\"user\") in db:\n        return True\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\n                \"Logaut\",\n                on_click=data.logout(\"login\")\n                ),\n            ft.ElevatedButton(\n                \"Home\",\n                on_click=data.go(\"/login\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\", width=200)\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated database\n\n        \"\"\"First the values must be stored in the browser, then in the login decorator the value must be retrieved through the key used and then validations must be used.\"\"\"\n        data.login(\n            key=\"login\",\n            value={\"user\": username.value},\n            next_route=\"/dashboard\",\n            time_expiry=timedelta(seconds=10),\n        )\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\n                \"store login in browser\",\n                on_click=store_login\n                ),\n            ft.ElevatedButton(\n                \"go Dasboard\",\n                on_click=data.go(\"/dashboard\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"Basic-JWT/#mode","title":"\ud83c\udfac Mode","text":"<p>APP </p> <p>WEB </p>"},{"location":"Basic-JWT/#decode","title":"decode","text":"<p>Decode the jwt and update the browser sessions.</p> <p>Parameters to use:</p> <ul> <li><code>key_login</code> : key used to store the data in the client, also used in the <code>login</code> method of <code>Datasy</code>.</li> <li><code>data</code> : Object instance of the <code>Datasy</code> class.</li> </ul> <p>Info</p> <ul> <li>Support async, example: <code>decode_async</code>.</li> <li>If the function to use is async it is recommended to use <code>decode_async</code> to avoid errors.</li> </ul> <p>Note</p> <p>The <code>decode</code> and <code>decode_async</code> functions can be used in other parts of the code, for example: Midleware</p>"},{"location":"CLI-to-create-app/","title":"CLI to create app","text":"<p>To start with a project with a structure that is familiar with <code>FletEasy</code>, with a design pattern based on <code>MVC</code>, you will need a <code>FletEasy</code> design pattern.</p>"},{"location":"CLI-to-create-app/#app-structure","title":"App structure","text":""},{"location":"CLI-to-create-app/#cli","title":"CLI","text":"<pre><code>fs init\n</code></pre>"},{"location":"CLI-to-create-app/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"Data-sharing-between-pages/","title":"Data sharing between pages","text":"<p>To be able to manipulate the data between client sessions, <code>data.share</code> is used, <code>data</code> is the parameter of the function decorated by <code>page</code>. Unlike <code>page.session</code> this allows a better protection of the data that you want to share in the pages, because through the <code>share_data</code> parameter of the <code>page</code> decorator you can limit to which pages you want to share the data, if the page does not have permission to share the data it will be automatically deleted. The methods to use are similar <code>page.session</code> example. </p> <p>Besides that you get some extra methods:</p> <ul> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul>"},{"location":"Data-sharing-between-pages/#example","title":"Example","text":"<p>It can be created in different file.py, for example using the <code>AddPagesy</code> class of <code>Flet-Easy</code> and then added to the main.py file.</p> <p>In this case page #1 creates the data to be shared with the other pages that have the <code>share_data</code> parameter of the <code>page</code> decorator enabled. With that in mind page #3 will not be able to access the shared data, in which case the shared data will be deleted automatically. (This works on pages that redirect continuously, if you switch to a page that does not allow data sharing, it will be deleted).</p> <pre><code>from dataclasses import dataclass\n\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/send-data\")\n\n\n@dataclass\nclass Test:\n    name: int\n    version: str\n\n\n# 1\n@app.page(\"/send-data\", share_data=True)\nasync def send_data_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"send data\"\n\n    data.share.set(\"test\", Test(\"Flet-Easy\", \"0.1\"))\n    data.share.set(\"owner\", \"Daxexs\")\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"data keys: {data.share.get_keys()}\"),\n            ft.Text(f\"data values: {data.share.get_values()}\"),\n            ft.Text(f\"data dict: {data.share.get_all()}\"),\n            ft.ElevatedButton(\n                \"View shared data\",\n                on_click=data.go(\"/data\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 2\n@app.page(\"/data\", share_data=True)\nasync def get_data_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"data\"\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}\")\n    else:\n        res = ft.Text(\"No value passed on the page!.\")\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n            ft.ElevatedButton(\n                \"Check the following page for matched data\",\n                on_click=data.go(\"/info\")\n            ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 3\n@app.page(\"/info\")\nasync def info_page(data: fs.Datasy):\n    page = data.page\n\n    page.title = \"Information\"\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}\")\n    else:\n        res = ft.Text(\"No value passed on the page!.\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Access to shared data?\"),\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"Data-sharing-between-pages/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"How-to-use/","title":"How to use","text":""},{"location":"How-to-use/#how-to-use-flet-easy","title":"How to use <code>Flet-Easy</code>?","text":"<p><code>Flet-Easy</code> presents a structure according to how the user wants to adapt it, since it allows to have several files and connect them to a main file.</p> <ul> <li>To use <code>Flet-easy</code>, first we have to use the <code>FletEasy</code> class and create an object where to make the app configurations.</li> </ul> <p>We create the app object, in which you can configure:</p> <ul> <li><code>route_prefix</code> : The route that is different from <code>/</code>.</li> <li><code>route_init</code> : The initial route to initialize the app, by default is <code>/</code>.</li> <li><code>route_login</code> : The route that will be redirected when the app has route protectionconfigured.</li> <li><code>on_Keyboard</code> : Enables the on_Keyboard event, by default it is disabled (False). <code>view</code></li> <li><code>on_resize</code> : Triggers the on_resize event, by default it is disabled (False). <code>view</code></li> <li><code>secret_key</code> : Used with <code>SecretKey</code> class of FletEasy, to configure JWT or client storage. <code>view</code></li> <li><code>auto_logout</code> : If you use JWT, you can configure it.</li> <li><code>path_views</code> : Configuration of the folder where are the .py files of the pages, you use the <code>Path</code> class to configure it. <code>view</code></li> </ul>"},{"location":"How-to-use/#mode","title":"\ud83d\udcf7 Mode","text":""},{"location":"How-to-use/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\napp = fs.FletEasy(\n    route_prefix='/FletEasy',\n    route_init='/FletEasy/home',\n)\n</code></pre>"},{"location":"How-to-use/#how-to-create-a-new-page","title":"How to create a new page?","text":"<p>To create a new page you use a decorator that provides the object created by the <code>FletEasy</code> class, which is <code>page</code> that allows you to enter certain parameters.</p> <p>To add pages, the following parameters are required:</p> <ul> <li><code>route</code>: text string of the url, for example(<code>'/FletEasy'</code>).</li> <li><code>title</code>: Defines the title of the page.</li> <li><code>clear</code>: Removes the pages from the <code>page.views</code> list of flet (optional).</li> <li><code>share_data</code> : Is a boolean value, useful if you want to share data between pages, in a morerestricted way (optional). <code>view</code></li> <li><code>protected_route</code>: Protects the page path, according to the <code>login</code> decorator configurationof the <code>FletEasy</code> class (optional). <code>view</code></li> <li><code>custom_params</code>: To add parameter validation in the custom url using a dictionary, where thekey is the parameter validation name and the value is the custom function that should report aboolean value. <code>view</code></li> <li><code>middleware</code> : Acts as an intermediary between different software components, intercepting andprocessing requests and responses. They allow adding functionalities to an application in aflexible and modular way.  It can be used in the app in general, as well as in each of thepages (optional). <code>view</code></li> </ul>"},{"location":"How-to-use/#example_1","title":"Example","text":"<pre><code>@app.page(route=\"/home\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n            ft.FilledButton(\"go Home\", on_click=data.go(f\"{data.route_prefix}/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\")\ndef dashboard_page(data: fs.Datasy):\n    page = data.page\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n            ft.FilledButton(\"go Home\", on_click=data.go(data.route_init)),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"How-to-use/#datasy-data","title":"Datasy (data)","text":"<p>The decorated function will always receive a parameter which is <code>data</code> (can be any name), which will make an object of type <code>Datasy</code> of <code>Flet-Easy</code>.</p> <p>This class has the following attributes, in order to access its data:</p> <ul> <li><code>page</code> : We get the values of the page provided by <code>Flet</code> .</li> <li><code>url_params</code> : We obtain a dictionary with the values passed through the url.</li> <li><code>view</code> : Get a <code>View</code> object from <code>Flet</code>, previouslyconfigured with the <code>view</code> decorator of <code>Flet-Easy</code>.</li> <li><code>route_prefix</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_init</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_login</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> </ul> <ul> <li><code>share</code> : It is used to be able to store and to obtain values in the client session, theutility is to be able to have greater control in the pages in which it is wanted to share, forit the parameter <code>share_data</code> of the <code>page</code> decorator must be used. The methods to use aresimilar <code>page.session</code>. <code>view</code> Besides that you get some extra methods:<ul> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul> </li> </ul> <ul> <li><code>on_keyboard_event</code> : get event values to use in the page. <code>view</code></li> <li><code>on_resize</code> : get event values to use in the page. <code>view</code></li> <li><code>route</code> : route provided by the route event, it is useful when using middlewares to check if the route is assecible.</li> </ul>"},{"location":"How-to-use/#methods","title":"Methods","text":"<ul> <li><code>logout</code> : method to close sessions of all sections in the browser (client storage), requires as parameter the key or the control (the key parameter of the control must have the value to delete), this is to avoid creating an extra function.</li> <li><code>login</code> : Method to create sessions of all sections in the browser (client storage), requires as parameters the key and the value, the same used in the <code>page.client_storage.set</code> method.</li> <li><code>go</code> : Method to change the application path (recommended to use this instead of <code>page.go</code> to avoid path errors).</li> <li><code>redirect</code> : To redirect to a path before the page is loaded, it is used in middleware.</li> </ul> <p>logaut and login</p> <p>Compatible with android, ios, windows and web.</p>"},{"location":"How-to-use/#mode_1","title":"\ud83c\udfac Mode","text":""},{"location":"Midleware/","title":"Midleware","text":"<p>It acts as an intermediary between different software components, intercepting and processing requests and responses. Allows adding functionalities before reloading each page in a flexible and modular way. It adds common functionalities, such as authentication, logging, data compression, caching, error handling, data transformation, etc.</p> <p>The function that will act as middleware will receive as a single mandatory parameter <code>data: Datasy</code> and its structure or content may vary depending on the context and specific requirements of the middleware.</p>"},{"location":"Midleware/#method-and-attribute-to-use","title":"Method and attribute to use","text":"<ul> <li><code>data.route</code> : to know the route that is loading.</li> <li><code>data.redirect</code> : route to redirect.</li> </ul> <p>Note</p> <p>If the function returns None, it will not prevent the page from loading that the route is accessing.</p> <p>Info</p> <p>Several functions can be used at the same time in the Midleware, since a list of functions is entered.</p>"},{"location":"Midleware/#general-application","title":"General Application","text":"<p>Another alternative to protected-route  <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/login\", route_login=\"/login\")\n\ndb = []  # Database\n\n# -------------------------------------------------------------------------------\n\n\n# Customized middleware\nasync def login_middleware(data: fs.Datasy):\n    # If the path is '/login', it will return the None function, which will not prevent access to the page.\n    if data.route == \"/login\":\n        return\n\n    username = await data.page.client_storage.get_async(\"login\")\n    if username is None or username not in db:\n        return data.redirect(\"/login\")\n\n\n# Midleware that runs in general, i.e. every time you load a page.\napp.add_middleware([login_middleware])\n# -------------------------------------------------------------------------------\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\")\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"go Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n\n# -------------------------------------------------------------------------------\n\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated databas\n\n        \"\"\"First the values must be stored in the browser, then in the login decorator the value must be retrieved through the key used and then validations must be used.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dashboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n\napp.run()\n</code></pre></p>"},{"location":"Midleware/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"Midleware/#for-each-page","title":"For each page","text":"<p>Another alternative to protected-route </p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/login\", route_login=\"/login\")\n\ndb = []  # Database\n\n# -------------------------------------------------------------------------------\n\n# Customized middleware\nasync def login_middleware(data: fs.Datasy):\n    username = await data.page.client_storage.get_async(\"login\")\n    if username is None or username not in db:\n        return data.redirect(\"/login\")\n\n# -------------------------------------------------------------------------------\n# Midleware used to load this page\n@app.page(route=\"/dashboard\", title=\"Dashboard\", middleware=[login_middleware])\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"go Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n# -------------------------------------------------------------------------------\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated databas\n\n        \"\"\"First the values must be stored in the browser, then in the login decorator the value must be retrieved through the key used and then validations must be used.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dashboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\napp.run()\n</code></pre>"},{"location":"Midleware/#mode_1","title":"\ud83c\udfac Mode","text":""},{"location":"Ref/","title":"Ref","text":"<p>Similar to <code>Ref</code> of <code>Flet</code>, with the only difference being that to access the referenced control (de-reference control) use the property <code>Ref.current</code> to <code>Ref.c</code></p> <p>Info</p> <p>It can be useful when we create components and we want to reference the controllers to be able to handle events in the component.</p>"},{"location":"Ref/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy()\n\n@app.page(route=\"/\", title=\"Use fs.Ref\")\ndef index_page(data: fs.Datasy):\n    first_name = fs.Ref[ft.TextField]()\n    last_name = fs.Ref[ft.TextField]()\n    greetings = fs.Ref[ft.Column]()\n\n    def btn_click(e):\n        greetings.current.controls.append(\n            ft.Text(f\"Hello, {first_name.current.value} {last_name.current.value}!\")\n        )\n        first_name.c.value = \"\"\n        last_name.c.value = \"\"\n        data.page.update()\n        first_name.c.focus()\n\n    return ft.View(\n        controls=[\n            ft.TextField(ref=first_name, label=\"First name\", autofocus=True),\n            ft.TextField(ref=last_name, label=\"Last name\"),\n            ft.ElevatedButton(\"Say hello!\", on_click=btn_click),\n            ft.Column(ref=greetings),\n        ]\n    )\n\napp.run()\n</code></pre>"},{"location":"ResponsiveControlsy/","title":"ResponsiveControlsy","text":"<p>Allows the controls to adapt to the size of the app (responsive). It is suitable for use in applications, in web it is not recommended.</p> <p>Note</p> <p>Avoid activating scroll outside ResponseControl.</p> <p>This class contains the following parameters:</p> <ul> <li><code>content: Control</code> : Contains a control of flet.</li> <li><code>expand: int</code> : To specify the space that will contain the content controller in the app, 1 equals the whole app.</li> <li><code>resize_interval: int</code> : To specify the response time (optional).</li> <li><code>on_resize: callable</code> : Custom function to be executed when the app is resized (optional).</li> <li><code>show_resize: bool</code> : To observe the size of the controller (width x * height). is disabled when sending an on_resize function. (optional)</li> <li><code>show_resize_terminal: bool</code> : To see the size of the controller (width x height) in the terminal. (optional)</li> </ul>"},{"location":"ResponsiveControlsy/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\nfs.ResponsiveControlsy(\n    content=ft.Container(\n        content=ft.Text(\"on_resize\"),\n        bgcolor=ft.colors.RED,\n        alignment=ft.alignment.center,\n        height=100\n    ),\n    expand=1,\n    show_resize=True\n)\n</code></pre>"},{"location":"ResponsiveControlsy/#advanced-use","title":"Advanced use","text":"<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet.canvas import CanvasResizeEvent\n\napp = fs.FletEasy(\n    route_init=\"/response\"\n)\n\nclass ResponseTest(ft.UserControl):\n    def __init__(self):\n        super().__init__()\n\n    def build(self):\n        return ft.Row(\n            controls=[\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Text(\"W x H\"),\n                        bgcolor=ft.colors.GREEN_400,\n                        alignment=ft.alignment.center,\n                    ),\n                    expand=1,\n                    show_resize=True,\n                ),\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Row(\n                            controls=[\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Column(\n                                            controls=[\n                                                ft.Container(\n                                                    bgcolor=ft.colors.DEEP_ORANGE_50,\n                                                    height=170,\n                                                    margin=5,\n                                                ),\n                                                ft.Container(\n                                                    bgcolor=ft.colors.BLACK87,\n                                                    height=170,\n                                                    margin=5\n                                                ),\n                                            ],\n                                            scroll=ft.ScrollMode.HIDDEN,\n                                            spacing=0,\n                                        ),\n                                        bgcolor=ft.colors.BROWN_500,\n                                        expand=True,\n                                        margin=ft.Margin(5, 5, 0, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Text(\n                                            \"ok\",\n                                        ),\n                                        bgcolor=ft.colors.CYAN_500,\n                                        alignment=ft.alignment.center,\n                                        margin=ft.Margin(0, 5, 5, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                            ],\n                            expand=1,\n                            spacing=0,\n                        ),\n                        bgcolor=ft.colors.AMBER_600,\n                        alignment=ft.alignment.center,\n                    ),\n                    show_resize=True,\n                    expand=3,\n                ),\n            ],\n            expand=2,\n        )\n\n@app.page(route=\"/response\", title=\"Response\")\nasync def response_page(data: fs.Datasy):\n    page = data.page\n\n    async def handle_resize(e: CanvasResizeEvent):\n        c = e.control.content\n        t = c.content\n        t.value = f\"{e.width} x {e.height}\"\n        page.update()\n\n    return ft.View(\n        controls=[\n            fs.ResponsiveControlsy(\n                content=ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.RED,\n                    alignment=ft.alignment.center,\n                    height=100,\n                ),\n                expand=1,\n                show_resize=True,\n            ),\n            fs.ResponsiveControlsy(\n                ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.BLUE,\n                    alignment=ft.alignment.center\n                ),\n                on_resize=handle_resize,\n                expand=1,\n            ),\n            fs.ResponsiveControlsy(\n                content=ResponseTest(),\n                expand=2\n                )\n        ],\n    )\n\napp.run()\n</code></pre>"},{"location":"ResponsiveControlsy/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"Run-the-app/","title":"Run the app","text":"<p>To run the application we use an object method already instantiated by Flet-Easy (you can customize the parameters of your method according to your needs):</p>"},{"location":"Run-the-app/#mode","title":"\ud83d\udcf7 Mode","text":""},{"location":"Run-the-app/#customize-as-it-is-executed","title":"customize as it is executed","text":""},{"location":"Run-the-app/#use-with-fastapi","title":"Use with fastapi","text":""},{"location":"Run-the-app/#export-asgi-app","title":"Export asgi app","text":""},{"location":"Starting/","title":"Flet-Easy","text":"<p><code>Flet-Easy</code> is a package built as an add-on for <code>Flet</code>, designed for beginners, what it does is to facilitate the use of <code>Flet</code> when building your applications, with a tidier and simpler code.</p>"},{"location":"Starting/#features","title":"Features","text":"<ul> <li>Easy to use (hence the name).</li> <li>Facilitates <code>flet</code> event handling.</li> <li>Simple page routing (There are three ways) for whichever one suits you best. <code>view</code></li> <li>App construction with numerous pages and custom flet configurations for desktop, mobile and web sites.</li> <li>Provides a better construction of your code, which can be scalable and easy to read (it adapts to your preferences, there are no limitations).</li> <li>Dynamic routing, customization in the routes for greater accuracy in sending data. <code>view</code></li> <li>Routing protection <code>view</code></li> <li>Custom Page 404 <code>view</code></li> <li>Controlled data sharing between pages. <code>view</code></li> <li>Asynchronous support.</li> <li>Middleware Support (in the app in general and in each of the pages). <code>view</code></li> <li>JWT support for authentication sessions in the data parameter. (useful to control the time of sessions) <code>view</code></li> <li>Working with other applications. <code>view</code></li> <li>CLI to create app structure <code>FletEasy</code> (<code>fs init</code>) <code>view</code></li> <li>Easy integration of <code>on_keyboard_event</code> in each of the pages. <code>view</code></li> <li>Use the percentage of the page width and height of the page with <code>on_resize</code>. <code>view</code></li> <li><code>ResponsiveControlsy</code> control to make the app responsive, useful for desktop applications. <code>view</code></li> <li>Soporta Application Packaging para su distribuci\u00f3n. view</li> </ul>"},{"location":"Starting/#flet-events-it-handles","title":"Flet events it handles","text":"<ul> <li><code>on_route_change</code> :  Dynamic routing</li> <li><code>on_view_pop</code></li> <li><code>on_keyboard_event</code></li> <li><code>on_resize</code></li> <li><code>on_error</code></li> </ul>"},{"location":"Starting/#installation","title":"Installation","text":"<p>Requires installation for use:</p> <ul> <li><code>Flet</code></li> </ul> <p><pre><code>  pip install flet\n</code></pre> <pre><code>  pip install flet-easy\n</code></pre></p>"},{"location":"Starting/#update","title":"Update","text":"<pre><code>  pip install flet-easy --upgrade\n</code></pre>"},{"location":"Starting/#flet-easy-app-example","title":"Flet-Easy app example","text":"<p>Here is an example of an application with 2 pages, \"Home\" and \"Counter\":</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/flet-easy\")\n\n# We add a page\n@app.page(route=\"/flet-easy\", title=\"Flet-Easy\")\ndef index_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\"),\n            ft.FilledButton(\"Go to Counter\", on_click=data.go(\"/counter\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We add a second page\n@app.page(route=\"/counter\", title=\"Counter\")\ndef counter_page(data: fs.Datasy):\n    page = data.page\n\n    txt_number = ft.TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    return ft.View(\n        controls=[\n            ft.Row(\n                [\n                    ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\n                    txt_number,\n                    ft.IconButton(ft.icons.ADD, on_click=plus_click),\n                ],\n                alignment=\"center\",\n            ),\n            ft.FilledButton(\"Go to Home\", on_click=data.go(\"/flet-easy\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We run the application\napp.run()\n</code></pre>"},{"location":"Starting/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"Working-with-other-apps/","title":"Working with other apps","text":""},{"location":"Working-with-other-apps/#working-with-other-apps-and-creating-apis","title":"Working with other apps and creating apis","text":"<p>To be able to make our main app work with other apps, besides being able to create apis from the same url path with the same host and port. First we must obtain the main of the app to be able to mount it in another app. For it we are going to use the <code>run</code> method with its <code>fastapi=True</code> parameter.</p> <p>More information</p> <ul> <li>Here</li> </ul>"},{"location":"Working-with-other-apps/#example","title":"Example","text":"main.py<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet import fastapi\n\napp = fs.FletEasy(\n    route_init=\"/Flet-Easy\",\n)\n\n@app.page(route=\"/Flet-Easy\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We create an app in FastApi\napp_main = fastapi.FastAPI()\n\n# Creating a basic test api.\n@app_main.get(\"/testing\")\ndef test_api():\n    return {\"success\": True}\n\n# We add the `flet` app to `fastapi`.\napp_main.mount(\"/\", fastapi.app(app.run(fastapi=True)))\n</code></pre> <p>Run the app <pre><code>uvicorn main:app_main\n</code></pre></p>"},{"location":"Working-with-other-apps/#mode","title":"\ud83d\udcf7 Mode","text":""},{"location":"dynamic-routes/","title":"Dynamic routes","text":"<p>FletEasy provides a simple and powerful routing to manage the access to the pages created, it contains 3 ways of use (choose the one that suits you best).</p>"},{"location":"dynamic-routes/#simple-form","title":"Simple form","text":"<p>Obtain the values of the parameters of the url, by means of the parameter data of the function.</p>"},{"location":"dynamic-routes/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id}/user/{name}\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy, id, name):\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"dynamic-routes/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"dynamic-routes/#advanced-form","title":"Advanced Form","text":"<p>Use dynamic parameters in the url to contain specific data, for example <code>id</code> is requested to be a number and <code>name</code> a string. For more information here</p>"},{"location":"dynamic-routes/#example_1","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id:d}/user/{name:l}\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy, id:int, name:str):\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"dynamic-routes/#mode_1","title":"\ud83c\udfac Mode","text":""},{"location":"dynamic-routes/#custom-validation","title":"Custom validation","text":"<p>To control the validation of custom data in the dynamic path, you must use the <code>custom_params</code> parameter of the <code>page</code> decorator, in this you can enter the key and the value as a function, being a dictionary can support a wide variety of data, according to your imagination \ud83e\udd14.</p>"},{"location":"dynamic-routes/#example_2","title":"Example","text":"<pre><code>from uuid import UUID\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs/a4cb5f2a-2281-4e66-85e4-441a40026357\")\n\ndef is_uuid(value):\n    try:\n        UUID(value)\n        return value\n    except ValueError:\n        return False\n\n@app.page(\n    route=\"/test/{id:d}/user/{name:l}/{uuid:Uuid}\",\n    title=\"Flet-Easy\",\n    custom_params={\"Uuid\": is_uuid},\n)\ndef home_page(data: fs.Datasy, id: int, name: str, uuid: UUID):\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\\nUUID: {uuid}\", size=50),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"dynamic-routes/#mode_2","title":"\ud83c\udfac Mode","text":""},{"location":"Add-pages/By-means-of-functions/","title":"By means of functions","text":""},{"location":"Add-pages/By-means-of-functions/#adding-pages-to-the-main-app-without-using-decorators","title":"Adding pages to the main app without using decorators","text":"<p>For this we will require the <code>add_routes</code> method of the object created by the <code>FletEasy</code> class:</p> <p>Note</p> <p>The application is faster when using automatic routing.</p>"},{"location":"Add-pages/By-means-of-functions/#app-structure","title":"App structure","text":""},{"location":"Add-pages/By-means-of-functions/#example","title":"Example","text":"<p>index.py<pre><code>import flet_easy as fs\nimport flet as ft\n\ndef page_index(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Index'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre> main.py<pre><code># Import functions from a `views` folder\nfrom views.user import users\nfrom views.index import page_index\nfrom views.test import test_page\nimport flet_easy as fs\n\n# Add routes without the use of decorators\napp.add_routes(add_views=[\n    fs.Pagesy('/index', page_index, tilte='index', clear=True),\n    fs.Pagesy('/user/task', users, tilte='users', clear=True),\n    fs.Pagesy('/test/{id:d}/user/{name:l}', test_page, title='test counter', protected_route=True),\n])\n</code></pre></p>"},{"location":"Add-pages/By-means-of-functions/#pagesy","title":"Pagesy","text":"<p>\ud83d\udcd1 The class <code>Pagesy</code>, it requires the following parameters:</p> <ul> <li><code>route</code>: text string of the url, for example(<code>'/index'</code>).</li> <li><code>view</code>: Stores the page function.</li> <li><code>title</code> : Define the title of the page.</li> <li><code>clear</code>: Removes the pages from the <code>page.views</code> list of flet. (optional)</li> <li><code>share_data</code> : It is a boolean value, which is useful if you want to share data between pages, in a morerestricted way. (optional)</li> <li><code>protected_route</code>: Protects the route of the page, according to the configuration of the <code>login</code> decoratorof the <code>FletEasy</code> class. (optional)</li> <li><code>custom_params</code>: To add validation of parameters in the custom url using a list, where the key is the nameof the parameter validation and the value is the custom function that must report a boolean value.</li> <li><code>middleware</code> : It acts as an intermediary between different software components, intercepting andprocessing requests and responses. They allow adding functionalities to an application in a flexible andmodular way. (optional)</li> </ul>"},{"location":"Add-pages/In-automatic/","title":"In automatic","text":"<p>It forgets the imports of each of the .py files and the functions or variables of the pages. For this you must have a proper order where all the .py files that contain each page must be in a folder, for example <code>views</code>. The configuration is done in the FletEasy class of the <code>path_views</code> parameter and in each of the .py files use the <code>AddPages</code> class.</p>"},{"location":"Add-pages/In-automatic/#app-structure","title":"App structure","text":""},{"location":"Add-pages/In-automatic/#example","title":"Example","text":"user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n\n@users.page('/task', title='Task')\ndef task_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Task'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page('/information', title='Information')\nasync def information_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre> <p>The <code>main.py</code> file will automatically recognize the pages created in each of the .py files in the <code>views</code> folder.</p> main.py<pre><code>import flet_easy as fs\nfrom pathlib import Path\n\napp = fs.FletEasy(\n    route_init='/user/task',\n    path_views=Path(__file__).parent / \"views\",\n)\n\napp.run()\n</code></pre>"},{"location":"Add-pages/Through-decorators/","title":"Through decorators","text":""},{"location":"Add-pages/Through-decorators/#add-pages-from-other-files-to-the-main-application","title":"Add pages from other files to the main application.","text":"<p>In order to create a page in a <code>file.py</code> different from the <code>main.py</code> file of the app, you need to use the <code>AddPagesy</code> class. Requires the parameter:</p> <ul> <li><code>route_prefix</code>: text string that will bind to the url of the page decorator, example(/users) this will encompass all urls of this class. (optional)</li> </ul>"},{"location":"Add-pages/Through-decorators/#app-structure","title":"App structure","text":""},{"location":"Add-pages/Through-decorators/#example","title":"Example","text":"<p>user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n\n@users.page('/task', title='Task')\ndef task_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Task'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page('/information', title='Information')\nasync def information_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre> Now how to add to the main app the <code>main.py</code> file. For this we use the <code>add_pages</code> method that requires as parameter a list of all the pages of other files that we want to add.</p> main.py<pre><code>import flet_easy as fs\nfrom views.user import users\n\napp = fs.FletEasy(\n    route_init='/user/task',\n)\n\napp.add_pages([users])\n\napp.run()\n</code></pre>"},{"location":"Customized-app/Control-view-configuration/","title":"control view configuration","text":""},{"location":"Customized-app/Control-view-configuration/#add-settings-of-the-view-controller-of-flet","title":"Add settings of the <code>View</code> controller of Flet","text":"<p>Which can be reused in each of the pages through the <code>data:fs.Datasy</code> parameter in the <code>page</code> decorator function of the app.</p> <p>Decorator <code>view</code> to add custom controls to the app, the decorator function will return the Viewsy class from FletEasy. Which will be obtained in functions with parameter <code>data:fs.Datasy</code> and can be added to the page view decorated with <code>page</code> of the FletEasy class.</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</li> <li>Add universal controls to use in more than one page in a simple way.</li> </ul>"},{"location":"Customized-app/Control-view-configuration/#example","title":"Example","text":"<p>We create an <code>AppBar</code> control of <code>Flet</code>, to be able to be reused in the other pages.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/home\")\n\n@app.view\ndef view(data: fs.Datasy):\n    return fs.Viewsy(\n        appbar=ft.AppBar(\n            title=ft.Text(\"AppBar Example\"),\n            center_title=False,\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            actions=[\n                ft.PopupMenuButton(\n                    items=[\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Home\",\n                            on_click=data.go(data.route_init)\n                            ),\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Dasboard\",\n                            on_click=data.go(\"/dasboard\")\n                            ),\n                    ]\n                ),\n            ],\n        ),\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/home\", title=\"Flet-Easy\", page_clear=True)\ndef home_page(data: fs.Datasy):\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text(\"Home\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\", size=50),\n        ],\n        appbar=view.appbar,  # We reuse control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/dasboard\", title=\"Dasboard\")\ndef dasboard_page(data: fs.Datasy):\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text(\"Dasboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Dasboard page\", size=50),\n        ],\n        appbar=view.appbar,  # We reuse control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"Customized-app/Control-view-configuration/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"Customized-app/Events/","title":"events","text":""},{"location":"Customized-app/Events/#configure-custom-events","title":"Configure custom events","text":"<p><code>config_event_handler</code> Decorator to add <code>Flet</code> event configurations -&gt; More information. The decorated function must receive the <code>data : fs.Datasy</code> parameter to be able to manipulate the app elements.</p>"},{"location":"Customized-app/Events/#example","title":"Example","text":"<ul> <li>Handle the event when the app is disconnected</li> </ul> <pre><code>@app.config_event_handler\ndef event_handler(data: fs.Datasy):\n    page = data.page\n\n    def on_disconnect(e):\n        print(\"Disconnect test application\")\n\n    page.on_disconnect = on_disconnect\n</code></pre>"},{"location":"Customized-app/General-settings/","title":"General settings","text":"<p>This is achieved through the <code>page</code> value provided by <code>Flet</code>. For this you have to use the <code>config</code> decorator of the <code>Flet-Easy</code> object.</p> <p>Decorator to add a custom configuration to the app:</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>page:ft.Page</code>. Which can be used to make universal app configurations.</li> <li>The decorator function does not return anything.</li> </ul>"},{"location":"Customized-app/General-settings/#example","title":"Example","text":"<p>In this example we change the page transitions</p> <pre><code>@app.config\ndef config(page: ft.Page):\n    theme = ft.Theme()\n    platforms = [\"android\", \"ios\", \"macos\", \"linux\", \"windows\"]\n    for platform in platforms:  # Removing animation on route change.\n    setattr(theme.page_transitions, platform, ft.PageTransitionTheme.NONE)\n\n    theme.text_theme = ft.TextTheme()\n    page.theme = theme\n</code></pre>"},{"location":"Customized-app/Page-404/","title":"Page 404","text":""},{"location":"Customized-app/Page-404/#which-will-be-activated-when-a-page-path-is-not-found","title":"Which will be activated when a page (path) is not found.","text":"<p><code>page_404</code> Decorator to add a new custom page when not finding a route in the app, you need the following parameters :</p> <ul> <li><code>route</code>: text string of the url, for example ('/FletEasy-404'). (optional).</li> <li><code>title</code> : Define the title of the page. (optional).</li> <li><code>clear_page</code>: remove the pages from the page.views list of flet. (optional)</li> </ul> <p>The decorated function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</p>"},{"location":"Customized-app/Page-404/#example","title":"Example","text":"<pre><code>@app.page_404('/FletEasy-404', title=\"Error 404\", page_clear=True)\ndef page404(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text(f'Custom 404 error', size=30),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n</code></pre>"},{"location":"Customized-app/Route-protection/","title":"Route protection","text":"<p>In order to configure the protection of routes, the <code>login</code> decorator of the created object of the app is used. The utility of this decorator is to obtain the values that we have previously registered in the <code>page.client_storage</code> (more details here), then you can perform validations with a database or any data manager used.</p> <p>Decorator to add a login configuration to the app (<code>protected_route</code>):</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>. Which can be used to get information and perform universal settings of the app.</li> <li>The decorator function must return a boolean.</li> </ul>"},{"location":"Customized-app/Route-protection/#example","title":"Example","text":"<p>In this case it is a basic example, with a test on a fictitious database.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\"\n    )\n\ndb = []  # Database\n\n@app.login\ndef login_x(data: fs.Datasy):\n    username = data.page.client_storage.get(\"login\")\n    if username is not None and username in db:  # We check if a value exists with the key login\n        # We verify if the username that is stored in the browser is in the simulated database.\n        return True\n    return False\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated database\n\n        \"\"\"First the values must be stored in the browser, then in the login decorator the value must be retrieved through the key used and then validations must be used.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dasboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"Customized-app/Route-protection/#mode","title":"\ud83c\udfac Mode","text":""},{"location":"Customized-app/Route-protection/#login","title":"login","text":"<p>Registering in the client's storage the key and value in all browser sessions.</p> <p>Parameters <code>data.login</code>:</p> <ul> <li><code>key</code> : It is the identifier to store the value in the client storage.</li> <li><code>value</code> : Recommend to use a dict if you use JWT.</li> <li><code>next_route</code> : Redirect to next route after creating login.</li> <li><code>time_expiry</code> : Time to expire the session, use the <code>timedelta</code> class  to configure. (Optional) (JWT usage required)</li> <li><code>sleep</code> : Time to do login checks, default is 1s. (Optional) (JWT usage required)</li> </ul>"},{"location":"Customized-app/Route-protection/#logout","title":"logout","text":"<p>Closes the sessions of all browser tabs or the device used, which has been previously configured with the <code>login</code> method.</p> <p>Parameters <code>data.logout</code>:</p> <ul> <li><code>key</code> : It is the identifier to store the value in the client storage.</li> </ul>"},{"location":"Events/On-resize/","title":"On resize","text":"<p>In order to use this event, it is obtained from <code>data</code> of the function decorated by <code>page</code>.</p>"},{"location":"Events/On-resize/#1-example","title":"1. Example","text":"<p><pre><code>@app.page(route=\"/resize\", title=\"Use Resize)\ndef resize_page(data:fs.Datasy):\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    return ft.View(\n        controls=[\n            ft.Text('Use Resize', size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre> When we get the values of the event, we can use the methods that this <code>on_resize</code> object has.</p> <ul> <li> <p><code>heightX(&lt;value&gt;)</code> : This method allows to obtain the values of the height of the page, which requires as parameter to enter an integer value from 1 to 100 (100 = 100%).</p> </li> <li> <p><code>widthX(&lt;value&gt;)</code> : This method is similar to the previous one in terms of page width.</p> </li> </ul> <p>Manipulation of the margin or padding of the page, this is important since it allows to use the previous methods correctly, that is to say the margin or paddinfg of the page has to be 0 so that the previous methods work correctly, in the case that you want to put a margin, customized, you can correct it modifying in margin of <code>on_resize</code>.</p> <p>Note</p> <p>If the <code>AppBar</code> control is used, if the padding is 0, the <code>on_resize</code> margin must be 28 on the y-axis (platform dependent).</p> <ul> <li><code>margin_y</code> : Requires an integer value on the y-axis.</li> <li><code>margin_x</code> : Requires an integer value on the x-axis.</li> </ul>"},{"location":"Events/On-resize/#2-example","title":"2. Example","text":"<pre><code>@app.page(route=\"/resize\", title=\"Use resize\")\ndef resize_page(data:fs.Datasy):\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    # Modifying the customized margin.\n    on_resize.margin_y = 10\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                bgcolor=ft.colors.GREEN_600,\n                height=on_resize.heightX(50)\n            ),\n            ft.Container(\n                bgcolor=ft.colors.BLUE_600,\n                height=on_resize.heightX(50),\n                width=on_resize.widthX(50)\n            )\n        ],\n        vertical_alignment=\"center\",\n        padding=10, # Customized padding\n    )\n</code></pre>"},{"location":"Events/On-resize/#mode","title":"\ud83d\udcf7 Mode","text":""},{"location":"Events/keyboard-event/","title":"On keyboard event","text":"<p>In order to use this method, the parameter of the function decorated by <code>page</code> is obtained through <code>data</code>.</p> <p>Manages keyboard input of values, contains the following methods:</p> <ul> <li><code>add_control(function: Callable)</code> : Add a controller configuration (method of a class or function), which is executed with the <code>on_keyboard_event</code> event.</li> <li><code>key()</code> : returns the value entered by keyboard.</li> <li><code>shift()</code> : returns the value entered by keyboard.</li> <li><code>ctrl()</code> : returns the value entered by keyboard.</li> <li><code>alt()</code> : returns the keyboard input.</li> <li><code>meta()</code> : returns keyboard input.</li> <li><code>test()</code> : returns a message of all keyboard input values (key, Shift, Control, Alt, Meta).</li> </ul>"},{"location":"Events/keyboard-event/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/keyboard\",\n    on_Keyboard=True\n    )\n\n@app.page(route=\"/keyboard\", title=\"Use Keyboard\")\ndef keyboard_page(data: fs.Datasy):\n    page = data.page\n    on_keyboard = data.on_keyboard_event\n\n    use_keyboard = ft.Column()\n\n    def show_event():\n        use_keyboard.controls.append(ft.Text(on_keyboard.test()))\n        page.update()\n\n    # Add function to be executed by pressing the keyboard.\n    on_keyboard.add_control(show_event)\n\n    return ft.View(\n        controls=[\n            ft.Text(\n                \"Use Keyboard\",\n                size=30\n            ),\n            use_keyboard\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"Events/keyboard-event/#mode","title":"\ud83c\udfac Mode","text":""}]}