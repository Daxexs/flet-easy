{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Home","text":"<p>Flet-Easy is a package created as a Flet add-on, designed to be easy to use with a cleaner order in the code, having many customizable features. </p>"},{"location":"Data-sharing-between-pages/","title":"Data sharing between pages","text":"<p>To be able to manipulate the data between client sessions, <code>data.share</code> is used, <code>data</code> is the parameter of the function decorated by <code>page</code>. Unlike <code>page.session</code> this allows a better protection of the data that you want to share in the pages, because through the <code>share_data</code> parameter of the <code>page</code> decorator you can limit to which pages you want to share the data, if the page does not have permission to share the data it will be automatically deleted. The methods to use are similar <code>page.session</code> example. </p> <p>Besides that you get some extra methods:</p> <ul> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul>"},{"location":"Data-sharing-between-pages/#example","title":"Example","text":"<p>It can be created in different file.py, for example using the <code>AddPagesy</code> class of <code>Flet-Easy</code> and then added to the main.py file.</p> <p>In this case page #1 creates the data to be shared with the other pages that have the <code>share_data</code> parameter of the <code>page</code> decorator enabled. With that in mind page #3 will not be able to access the shared data, in which case the shared data will be deleted automatically. (This works on pages that redirect continuously, if you switch to a page that does not allow data sharing, it will be deleted).</p> <pre><code>from dataclasses import dataclass\n....\n...\n\n@dataclass\nclass Test:\n    name:int\n    version:str\n\n# 1  \n@app.page('/send-data', share_data=True)\nasync def send_data_page(data:fs.Datasy):\n    page = data.page\n    page.title = 'send data'\n\n    data.share.set('test', Test('Flet-Easy', '0.1'))\n    data.share.set('owner', 'Daxexs')\n\n    return ft.View(\n        route='/send-data',\n        controls=[\n            ft.Text(f'data keys: {data.share.get_keys()}'),\n            ft.Text(f'data values: {data.share.get_values()}'),\n            ft.Text(f'data dict: {data.share.get_all()}'),\n            ft.ElevatedButton(\n                'View shared data',\n                key='/data',\n                on_click=data.go_async)\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n\n# 2\n@app.page('/data',share_data=True)\nasync def get_data_page(data: fs.Datasy):\n    page = data.page\n    page.title = 'data'\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get('test')\n        y: str = data.share.get('owner')\n        res = ft.Text(f'Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}')\n    else:\n        res = ft.Text('No value passed on the page!.')\n\n    return ft.View(\n        route='/data',\n        controls=[\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n            ),\n            ft.ElevatedButton(\n                'Check the following page for matched data',\n                key='/info',\n                on_click=data.go_async\n            )\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n\n# 3\n@app.page('/info')\nasync def info_page(data: fs.Datasy):\n    page = data.page\n\n    page.title = \"Information\"\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get('test')\n        y: str = data.share.get('owner')\n        res = ft.Text(\n            f'Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}')\n    else:\n        res = ft.Text('No value passed on the page!.')\n\n    return ft.View(\n        route='/info',\n        controls=[\n            ft.Text('Access to shared data?'),\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n            )\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n</code></pre>"},{"location":"Data-sharing-between-pages/#mode","title":"Mode","text":""},{"location":"How-to-use/","title":"How to use","text":""},{"location":"How-to-use/#how-to-use-flet-easy","title":"How to use <code>Flet-Easy</code>?","text":"<p>Flet-Easy` presents a structure according to how the user wants to adapt it, since it allows to have several files and connect them to a main file.</p> <ul> <li> <p>To use <code>Flet-easy</code>, first you have to use the <code>FletEasy</code> class and create an object where you can make the app configurations. we create the app object, in it you can configure:</p> <ul> <li><code>route_prefix</code> : The path that is different from '/'.</li> <li><code>route_init</code> : The initial path when initializing the app</li> <li><code>route_login</code> : The path that will be redirected when the app has path protection configured.</li> <li><code>on_Keyboard</code> : Activate the event on_Keyboard, by default it is deactivated (False).</li> <li><code>on_resize</code> : Activate the event on_resize, by default it is deactivated (False).</li> </ul> </li> </ul>"},{"location":"How-to-use/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\napp = fs.FletEasy(\n    route_prefix='/hi',\n    route_init='/hi',\n    route_login='/hi/login',\n)\n</code></pre>"},{"location":"How-to-use/#how-to-create-a-new-page","title":"How to create a new page?","text":"<p>To create a new page a decorator that offers the object created by the <code>FletEasy</code> class, which is <code>page</code> that allows to enter certain parameters, is used.</p>"},{"location":"How-to-use/#decorator-page","title":"Decorator page","text":""},{"location":"How-to-use/#route","title":"<code>route</code>","text":"<p>Text string of the url, for example('/FletEasy').</p>"},{"location":"How-to-use/#clear","title":"<code>clear</code>","text":"<p>Removes the pages from the page.views list of flet. (optional)</p>"},{"location":"How-to-use/#share_data","title":"<code>share_data</code>","text":"<p>It is a boolean value, which is useful if you want to share data between pages, in a more restricted way. More information</p>"},{"location":"How-to-use/#protected_route","title":"<code>protected_route</code>","text":"<p>Protects the route of the page, according to the configuration of the login decorator of the FletEasy class. (optional)</p>"},{"location":"How-to-use/#custom_params","title":"<code>custom_params</code>","text":"<p>To add parameter validation in the custom url using a dictionary, where the key is the name of the parameter validation and the value is the custom function that should return a value (boolean if false). view</p>"},{"location":"How-to-use/#example_1","title":"Example","text":"<p><pre><code>@app.page(route=\"/home\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    return ft.View(\n        route=\"/flet-easy\",\n        controls=[\n            ft.Text(\"Home page\"),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n</code></pre> The decorated function will always receive a parameter which is <code>data</code> (can be any name), which will make an object of type <code>Datasy</code> of <code>Flet-Easy</code>. This class has the following attributes, in order to access its data:</p> <ul> <li><code>page</code> : We get the values of the page provided by <code>Flet</code> More information .</li> <li><code>url_params</code> : We obtain a dictionary with the values passed through the url.</li> <li><code>view</code> : Get a <code>View</code> object from <code>Flet</code> More information, previously configured with the <code>view</code> decorator of <code>Flet-Easy</code>.</li> <li><code>route_prefix</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_init</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_login</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>share</code> : It is used to be able to store and to obtain values in the client session, the utility is to be able to have greater control in the pages in which it is wanted to share and not in all the pages. More information</li> <li><code>on_keyboard_event</code> : Get event values to use in the page. view</li> <li><code>on_resize</code> : Get event values to use in the page. view</li> <li><code>logaut | logaut_async</code> : Method to close sessions of all sections in the browser (client storage), requires as parameter the key or the control (the parameter key of the control must have the value to delete), this is to avoid creating an extra function.</li> <li><code>update_login | update_login_async</code> : Method to create sessions of all sections in the browser (client storage), requires as parameters the key and the value, the same used in the <code>page.client_storage.set</code> method.</li> <li><code>go | go_async</code> : Method to change the path of the application, in order to reduce the code, you must assign the value of the <code>key</code> parameter of the <code>control</code> used, for example buttons.</li> </ul> <p>logaut and update_login</p> <p>Compatible with android, ios, windows and web.</p>"},{"location":"How-to-use/#mode","title":"Mode","text":""},{"location":"ResponsiveControlsy/","title":"ResponsiveControlsy","text":"<p>Allows the controls to adapt to the size of the app (responsive). It is suitable for use in applications, in web it is not recommended.</p> <p>Note</p> <p>Avoid activating scroll outside ResponseControl.</p> <p>This class contains the following parameters:</p> <ul> <li><code>content: Control</code> : Contains a control of flet.</li> <li><code>expand: int</code> : To specify the space that will contain the content controller in the app, 1 equals the whole app.</li> <li><code>resize_interval: int</code> : To specify the response time (optional).</li> <li><code>on_resize: callable</code> : Custom function to be executed when the app is resized (optional).</li> <li><code>show_resize: bool</code> : To observe the size of the controller (width x * height). is disabled when sending an on_resize function. (optional)</li> <li><code>show_resize_terminal: bool</code> : To see the size of the controller (width x height) in the terminal. (optional)</li> </ul>"},{"location":"ResponsiveControlsy/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\nfs.ResponsiveControlsy(\n    content=ft.Container(\n        content=ft.Text(\"on_resize\"),\n        bgcolor=ft.colors.RED,\n        alignment=ft.alignment.center,\n        height=100\n    ),\n    expand=1,\n    show_resize=True\n)\n</code></pre>"},{"location":"ResponsiveControlsy/#advanced-use","title":"Advanced use","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\nclass ResponseTest(ft.UserControl):\n    def __init__(self):\n        super().__init__()\n\n    def build(self):\n        return ft.Row(\n            controls=[\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Text(\"W x H\"),\n                        bgcolor=ft.colors.GREEN_400,\n                        alignment=ft.alignment.center\n                    ),\n                    expand=1,\n                    show_resize=True\n                ),\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Row(\n                            controls=[\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Column(\n                                            controls=[\n                                                ft.Container(\n                                                    bgcolor=ft.colors.DEEP_ORANGE_50,\n                                                    height=170,\n                                                    margin=5\n                                                ),\n                                                ft.Container(\n                                                    bgcolor=ft.colors.BLACK87,\n                                                    height=170,\n                                                    margin=5\n                                                )\n                                            ],\n                                            scroll=ft.ScrollMode.HIDDEN,\n                                            spacing=0\n                                        ),\n                                        bgcolor=ft.colors.BROWN_500,\n                                        expand=True,\n                                        margin=ft.Margin(5, 5, 0, 5)\n                                    ),\n                                    expand=1,\n                                    show_resize=True\n                                ),\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Text(\n                                            'ok',\n                                        ),\n                                        bgcolor=ft.colors.CYAN_500,\n                                        alignment=ft.alignment.center,\n                                        margin=ft.Margin(0, 5, 5, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n\n                                ),\n                            ],\n                            expand=1,\n                            spacing=0,\n\n                        ),\n                        bgcolor=ft.colors.AMBER_600,\n                        alignment=ft.alignment.center\n                    ),\n                    show_resize=True,\n                    expand=3\n                )\n            ],\n            expand=2\n        )\n\n@app.page(route=\"/response\")\nasync def response_page(data: fs.Datasy):\n    page = data.page\n\n    page.title = 'response'\n\n    async def handle_resize(e: CanvasResizeEvent):\n        c = e.control.content\n        t = c.content\n        t.value = f\"{e.width} x {e.height}\"\n        await page.update_async()\n\n    return ft.View(\n        '/response',\n        controls=[\n            fs.ResponsiveControlsy(\n                content=ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.RED,\n                    alignment=ft.alignment.center,\n                    height=100\n                ),\n                expand=1,\n                show_resize=True\n            ),\n            fs.ResponsiveControlsy(\n                ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.BLUE,\n                    alignment=ft.alignment.center\n                ),\n                on_resize=handle_resize,\n                expand=1\n            ),\n            fs.ResponsiveControlsy(\n                content=ResponseTest(),\n                expand=2\n            ),\n        ],\n    )\n</code></pre>"},{"location":"ResponsiveControlsy/#mode","title":"Mode","text":""},{"location":"Run-the-app/","title":"Run the app","text":"<p>To run the application we use an object method already instantiated by Flet-Easy, there are three ways to run the application (you can customize its method parameters as required):</p> <p>Note</p> <p>Each method is used to what you want to use in the page globally, so you don't have problems with <code>page_update</code> and <code>page.update_async</code>.</p> <ul> <li><code>run</code> (normal)</li> <li><code>run_async</code> (asynchronous)</li> <li><code>fastapi</code> (asynchronous) : Returns a value to be able to run the app, for more information on its attributes  view</li> </ul>"},{"location":"Starting/","title":"Flet-Easy","text":"<p><code>Flet-Easy</code> is a package built as an add-on for <code>Flet</code>, designed for beginners what it does is to make <code>Flet</code> easier when building your apps, with a tidier and simpler code. Some functions:</p> <ul> <li>Facilitates the handling of <code>flet</code> events.</li> <li>Page building using decorators, which allows you to make numerous custom configurations to flet for desktop, mobile and website application.</li> <li>Designed to work with numerous pages of your created application.</li> <li>Provides better MVC construction of your code, which can be scalable and easy to read.</li> <li>Not only limits the MVC model but you can customize it according to your preferences.</li> <li>Customized URLs for more precision in sending data.</li> <li>Controlled data sharing between pages.</li> <li>Support asynchronous.</li> <li>Supports Application Packaging for distribution.</li> </ul> <p>and more extra features.....</p>"},{"location":"Starting/#flet-events-it-handles","title":"Flet events it handles","text":"<ul> <li><code>on_route_change</code> :  Dynamic routing</li> <li><code>on_view_pop</code></li> <li><code>on_keyboard_event</code></li> <li><code>on_resize</code></li> <li><code>on_error</code></li> </ul>"},{"location":"Starting/#installation","title":"Installation","text":"<p>Requires installation for use:</p> <ul> <li><code>Flet</code> (Installed automatically)</li> <li><code>Flet-fastapi</code> (Optional)</li> <li><code>uvicorn</code> (Optional)</li> </ul> <pre><code>  pip install flet-easy\n</code></pre>"},{"location":"Starting/#update","title":"Update","text":"<pre><code>  pip install flet-easy --upgrade\n</code></pre>"},{"location":"Starting/#flet-easy-app-example","title":"Flet-Easy app example","text":"<p>Here is an example of an application with 2 pages, \"Home\" and \"Counter\":</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/flet-easy\")\n\n# We add a page\n@app.page(route=\"/flet-easy\")\ndef index_page(data: fs.Datasy):\n    page = data.page\n\n    page.title = \"Flet-Easy\"\n\n    def go_counter(e):\n        page.go(\"/counter\")\n\n    return ft.View(\n        route=\"/flet-easy\",\n        controls=[\n            ft.Text(\"Home page\"),\n            ft.FilledButton(\"Go to Counter\", on_click=go_counter),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n# We add a second page\n@app.page(route=\"/counter\")\ndef counter_page(data: fs.Datasy):\n    page = data.page\n\n    page.title = \"Counter\"\n\n    txt_number = ft.TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    def go_home(e):\n        page.go(\"/flet-easy\")\n\n    return ft.View(\n        route=\"/counter\",\n        controls=[\n            ft.Row(\n                [\n                    ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\n                    txt_number,\n                    ft.IconButton(ft.icons.ADD, on_click=plus_click),\n                ],\n                alignment=\"center\",\n            ),\n            ft.FilledButton(\"Go to Home\", on_click=go_home),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n# We run the application\napp.run()\n</code></pre>"},{"location":"Working-with-other-apps/","title":"Working with other apps","text":""},{"location":"Working-with-other-apps/#working-with-other-apps-and-creating-apis","title":"Working with other apps and creating apis","text":"<p>To be able to function our main app with other apps, besides being able to create apis from the same url path with the same host and port. First we must obtain the main of the app to be able to mount in another app. For it we are going to use the <code>fastapi</code> method.</p> <p>More information</p> <ul> <li>Here</li> </ul>"},{"location":"Working-with-other-apps/#example","title":"Example","text":"<p><pre><code>.......\n.......\n\nimport flet_fastapi\n\n# getting the main value of the app.\npage_app = app.fastapi()\n\napp_main = flet_fastapi.FastAPI()\n\n# Creating a basic test api.\n@app_main.get('/testing')\ndef test_api():\n    return {'success': True}\n\napp_main.mount('/', flet_fastapi.app(page_app))\n</code></pre> Run the app <pre><code>uvicorn main:app_main\n</code></pre></p>"},{"location":"Working-with-other-apps/#mode","title":"Mode","text":""},{"location":"dynamic-routes/","title":"Dynamic routes","text":""},{"location":"dynamic-routes/#simple-form","title":"Simple form","text":"<p>Obtain the values of the parameters of the url, by means of the parameter data of the function.</p> <pre><code>@app.page(route=\"/test/{id}/user/{name}\")\ndef home_page(data: fs.Datasy, id, name):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    # Another way to obtain the values\n    params = data.url_params\n    id = params.get('id')\n    name = params.get('name')\n\n    return ft.View(\n        route=\"/flet-easy\",\n        controls=[\n            ft.Text(\"Home page\"),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n</code></pre>"},{"location":"dynamic-routes/#advanced-form","title":"Advanced Form","text":"<p>Use dynamic parameters in the url to contain specific data, for example <code>id</code> is requested to be a number and <code>name</code> a string. For more information here</p> <pre><code>@app.page(route=\"/test/{id:d}/user/{name:l}\")\ndef home_page(data: fs.Datasy, id:int, name:str):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    return ft.View(\n        route=\"/flet-easy\",\n        controls=[\n            ft.Text(f \"Home page: id={id} name={name}\"),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n</code></pre>"},{"location":"dynamic-routes/#custom-validation","title":"Custom validation","text":"<p>To control the validation of custom data in the dynamic path, you must use the <code>custom_params</code> parameter of the <code>page</code> decorator, in this you can enter the key and the value as a function, being a dictionary can support a wide variety of data, according to your imagination \ud83e\udd14.</p>"},{"location":"dynamic-routes/#example","title":"Example","text":"<pre><code>from uuid import UUID\n\ndef is_uuid(value):\n    try:\n        uuid.UUID(value)\n        return value\n    except ValueError:\n        return False\n\n@app.page(route=\"/test/{id:d}/user/{name:l}/{uuid:Uuid}\", custom_params={\"Uuid\": is_uuid})\ndef home_page(data: fs.Datasy, id:int, name:str, uuid:UUID):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    return ft.View(\n        route=\"/flet-easy\",\n        controls=[\n            ft.Text(f \"Home page: id={id} name={name} uuid={uuid}\"),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n</code></pre>"},{"location":"Add-pages/By-means-of-functions/","title":"By means of functions","text":""},{"location":"Add-pages/By-means-of-functions/#adding-pages-to-the-main-app-without-using-decorators","title":"Adding pages to the main app without using decorators","text":"<p>For this we will require the <code>add_routes</code> method of the object created by the <code>FletEasy</code> class:</p> <p>Note</p> <p>The app is faster when using decorators.</p> <p>Example: main.py<pre><code># Import functions from a `view` folder\nfrom view import (\n    index_page,\n    test_page,\n    counter_page,\n    login_page,\n    task_page,\n    markdown_page,\n    response_page\n)\nimport flet_easy as fs\n\n# Add routes without the use of decorators\napp.add_routes(add_views=[\n    fs.Pagesy('/hi', index_page, True),\n    fs.Pagesy('/test/{id:d}/user/{name:l}', test_page, protected_route=True),\n    fs.Pagesy('/counter', counter_page),\n    fs.Pagesy('/task', task_page),\n    fs.Pagesy('/login/user', login_page),\n    fs.Pagesy('/markdown', markdown_page),\n    fs.Pagesy('/response', response_page),\n])\n</code></pre> \ud83d\udcd1 The class <code>Pagesy</code>, it requires the following parameters:</p> <ul> <li><code>route</code> : text string of the url, for example('/task').</li> <li><code>view</code> : Stores the page function.</li> <li><code>clear</code> : Removes the pages from the page.views list of flet. (optional)</li> <li><code>share_data</code> : It is a boolean value, which is useful if you want to share data between pages, in a more restricted way. More information</li> <li><code>protected_route</code> : Protects the route of the page, according to the configuration of the login decorator of the FletEasy class. (optional)</li> <li><code>custom_params</code> : To add parameter validation in the custom url using a dictionary, where the key is the name of the parameter validation and the value is the custom function that should return a value (boolean if false).</li> </ul>"},{"location":"Add-pages/Through-decorators/","title":"Through decorators","text":""},{"location":"Add-pages/Through-decorators/#add-pages-from-other-files-to-the-main-application","title":"Add pages from other files to the main application.","text":"<ul> <li>In order to create a page in a <code>file.py</code> different from the <code>main.py</code> file of the app, you need to use the <code>AddPagesy</code> class. Requires the parameter:</li> <li><code>route_prefix</code>: text string that will bind to the url of the page decorator, example(/users) this will encompass all urls of this class. (optional)</li> </ul>"},{"location":"Add-pages/Through-decorators/#example","title":"Example","text":"<p>file.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n\n@users.page('/task')\ndef task_page(data: fs.Datasy):\n\n    page = data.page\n\n    page.title = 'Task'\n\n    return ft.View(\n        route='/users/task',\n        controls=[\n            ft.Text('Task'),\n        ],\n        vertical_alignment=view.vertical_alignment,\n        horizontal_alignment=view.horizontal_alignment\n\n    )\n\n@users.page('/information')\ndef information_page(data: fs.Datasy):\n\n    page = data.page\n\n    page.title = 'Information'\n\n    return ft.View(\n        route='/users/information',\n        controls=[\n            ft.Text('Information'),\n        ],\n        vertical_alignment=view.vertical_alignment,\n        horizontal_alignment=view.horizontal_alignment\n\n    )\n</code></pre> Now how to add to the main app the <code>main.py</code> file. For this we use the <code>add_pages</code> method that requires as parameter a list of all the pages of other files that we want to add.</p> main.py<pre><code>import flet_easy as fs\nfrom file import users\n\napp = fs.FletEasy(\n    route_init='/user/task',\n)\n\napp.add_pages([users])\n\napp.run()\n</code></pre>"},{"location":"Customized-app/Control-view-configuration/","title":"control view configuration","text":""},{"location":"Customized-app/Control-view-configuration/#add-settings-of-the-view-controller-of-flet","title":"Add settings of the <code>View</code> controller of Flet","text":"<p>Which can be reused in each of the pages through the <code>data:fs.Datasy</code> parameter in the <code>page</code> decorator function of the app.</p> <p>Decorator <code>view</code> to add custom controls to the app, the decorator function will return the Viewsy class from FletEasy. Which will be obtained in functions with parameter <code>data:fs.Datasy</code> and can be added to the page view decorated with <code>page</code> of the FletEasy class.</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</li> <li>Add universal controls to use in more than one page in a simple way.</li> </ul>"},{"location":"Customized-app/Control-view-configuration/#example","title":"Example","text":"<p>We create an <code>AppBar</code> control of <code>Flet</code>, to be able to be reused in the other pages.</p> <p><pre><code>import flet as ft\nimport flet_easy as fs\n\n@app.view\ndef view(data: fs.Datasy):\n    page = data.page\n\n    def modify_theme():\n        if page.theme_mode == ft.ThemeMode.DARK:\n            page.theme_mode = ft.ThemeMode.LIGHT\n        else:\n            page.theme_mode = ft.ThemeMode.DARK\n\n    def theme(e):\n        if page.theme_mode == ft.ThemeMode.SYSTEM:\n            modify_theme()\n\n        modify_theme()\n        page.update()\n\n    def go_home(e):\n        page.go(data.route_init)\n\n    return fs.Viewsy(\n        appbar=ft.AppBar(\n            title=ft.Text(\"AppBar Example\"),\n            center_title=False,\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            actions=[\n                ft.IconButton(ft.icons.WB_SUNNY_OUTLINED, on_click=theme),\n                ft.PopupMenuButton(\n                    items=[\n                        ft.PopupMenuItem(text=\"\ud83d\udd25 Home\", on_click=go_home),\n                    ]\n                ),\n            ],\n        ),\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n</code></pre> Now we can reuse it in a page. <pre><code>@app.page(route=\"/home\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text('Home')\n\n    return ft.View(\n        route=\"/flet-easy\",\n        controls=[\n            ft.Text(\"Home page\"),\n        ],\n        appbar=view.appbar, # We reuse control\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n</code></pre></p>"},{"location":"Customized-app/Events/","title":"events","text":""},{"location":"Customized-app/Events/#configure-custom-events","title":"Configure custom events","text":"<p><code>config_event_handler</code> Decorator to add <code>Flet</code> event configurations -&gt; More information. The decorated function must receive the page parameter to be able to manipulate the app elements.</p>"},{"location":"Customized-app/Events/#example","title":"Example","text":"<ul> <li>Handle the event when the app is disconnected</li> </ul> <pre><code>@app.config_event_handler\ndef event_handler(page: ft.Page):\n    def on_disconnect(e):\n        print(\"Disconnect test application\")\n\n    page.on_disconnect = on_disconnect\n</code></pre>"},{"location":"Customized-app/General-settings/","title":"General settings","text":"<p>This is achieved through the <code>page</code> value provided by <code>Flet</code>. For this you have to use the <code>config</code> decorator of the <code>Flet-Easy</code> object.</p> <p>Decorator to add a custom configuration to the app:</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>page:ft.Page</code>. Which can be used to make universal app configurations.</li> <li>The decorator function does not return anything.</li> </ul>"},{"location":"Customized-app/General-settings/#example","title":"Example","text":"<p>In this example we change the page transitions</p> <pre><code>@app.config\ndef config(page: ft.Page):\n    theme = ft.Theme()\n    platforms = [\"android\", \"ios\", \"macos\", \"linux\", \"windows\"]\n    for platform in platforms:  # Removing animation on route change.\n    setattr(theme.page_transitions, platform, ft.PageTransitionTheme.NONE)\n\n    theme.text_theme = ft.TextTheme()\n    page.theme = theme\n</code></pre>"},{"location":"Customized-app/Page-404/","title":"Page 404","text":""},{"location":"Customized-app/Page-404/#which-will-be-activated-when-a-page-path-is-not-found","title":"Which will be activated when a page (path) is not found.","text":"<p><code>page_404</code> Decorator to add a new custom page when not finding a route in the app, you need the following parameters :</p> <ul> <li><code>route</code>: text string of the url, for example ('/FletEasy-404'). (optional).</li> <li><code>clear_page</code>: remove the pages from the page.views list of flet. (optional)</li> </ul> <p>The decorated function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</p>"},{"location":"Customized-app/Page-404/#example","title":"Example","text":"<pre><code>@app.page_404('/FletEasy-404', page_clear=True)\ndef page404(data: fs.Datasy):\n    page = data.page\n    page.title = 'Error 404'\n\n    return ft.View(\n        route='/error404',\n        controls=[\n            ft.Text(f'Custom 404 error', size=30),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n</code></pre>"},{"location":"Customized-app/Route-protection/","title":"Route protection","text":"<p>In order to configure the protection of routes, the <code>login</code> decorator of the created object of the app is used. The utility of this decorator is to obtain the values that we have previously registered in the <code>page.client_storage</code> (more details here), then you can perform validations with a database or any data manager used.</p> <p>Decorator to add a login configuration to the app (protected_route):</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>page:ft.Page</code>. Which can be used to get information and perform universal settings of the app.</li> <li>The decorator function must return a boolean.</li> </ul>"},{"location":"Customized-app/Route-protection/#example","title":"Example","text":"<p>In this case it is a basic example, with a test on a fictitious database.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\"\n)\n\ndb = [] # Database\n\n\n@app.login\ndef login_x(page: ft.Page):\n    username = page.client_storage.get(\"login\")\n    if username is not None:  # We check if a value exists with the key login\n        # We verify if the username that is stored in the browser is in the simulated database.\n        if username in db:\n            return True\n    return False\n\n\n@app.page(route=\"/dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Dashboard\"\n\n    def logaut(e):\n        # We delete the key that we have previously registered\n        page.client_storage.remove('login')\n        page.go('/login')\n\n    return ft.View(\n        route=\"/dashboard\",\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            ft.ElevatedButton('Logaut', on_click=logaut)\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n\n@app.page(route=\"/login\")\ndef login_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Login\"\n\n    # create login stored user\n    username = ft.TextField(label='Username')\n\n    def store_login(e):\n        \"\"\" First the values must be stored in the browser, then in the login decorator the value must be retrieved through the key used and then validations must be used. \"\"\"\n        page.client_storage.set(key='login', value=username.value)\n\n        db.append(username.value)  # We add to the simulated database\n\n    return ft.View(\n        route=\"/login\",\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton('store login in browser', on_click=store_login),\n            ft.ElevatedButton(\"go\", on_click=lambda _: page.go(\"/dashboard\"))\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n    )\n\n\napp.run()\n</code></pre>"},{"location":"Events/On-resize/","title":"On resize","text":"<p>In order to use this event, it is obtained from <code>data</code> of the function decorated by <code>page</code>.</p>"},{"location":"Events/On-resize/#1-example","title":"1. Example","text":"<p><pre><code>@app.page(route=\"/resize\")\ndef resize_page(data:fs.Datasy):\n    page = data.page\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    page.title = 'Use resize'\n\n    return ft.View(\n        route='/resize',\n        controls=[\n            ft.Text('Use Resize', size=30),\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n</code></pre> When we get the values of the event, we can use the methods that this <code>on_resize</code> object has.</p> <ul> <li> <p><code>heightX(&lt;value&gt;)</code> : This method allows to obtain the values of the height of the page, which requires as parameter to enter an integer value from 1 to 100 (100 = 100%).</p> </li> <li> <p><code>widthX(&lt;value&gt;)</code> : This method is similar to the previous one in terms of page width.</p> </li> </ul> <p>Manipulation of the margin or padding of the page, this is important since it allows to use the previous methods correctly, that is to say the margin or paddinfg of the page has to be 0 so that the previous methods work correctly, in the case that you want to put a margin, customized, you can correct it modifying in margin of <code>on_resize</code>.</p> <p>Note</p> <p>If the <code>AppBar</code> control is used, if the padding is 0, the <code>on_resize</code> margin must be 28 on the y-axis (platform dependent).</p> <ul> <li><code>margin_y</code> : Requires an integer value on the y-axis.</li> <li><code>margin_x</code> : Requires an integer value on the x-axis.</li> </ul>"},{"location":"Events/On-resize/#2-example","title":"2. Example","text":"<pre><code>@app.page(route=\"/resize\")\ndef resize_page(data:fs.Datasy):\n    page = data.page\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    # Modifying the customized margin.\n    on_resize.margin_y = 10\n\n    page.title = 'Use resize'\n\n    return ft.View(\n        route='/resize',\n        controls=[\n            ft.Container(\n                bgcolor=ft.colors.GREEN_600,\n                height=on_resize.heightX(50)\n            ),\n            ft.Container(\n                bgcolor=ft.colors.BLUE_600,\n                height=on_resize.heightX(50),\n                width=on_resize.widthX(50)\n            )\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        padding=10, # Customized padding\n    )\n</code></pre>"},{"location":"Events/On-resize/#mode","title":"Mode","text":""},{"location":"Events/keyboard-event/","title":"On keyboard event","text":"<p>In order to use this method, the parameter of the function decorated by <code>page</code> is obtained through <code>data</code>.</p> <p>Manages keyboard input of values, contains the following methods:</p> <ul> <li><code>add_control(function: Callable)</code> : Add a controller configuration (method of a class or function), which is executed with the <code>on_keyboard_event</code> event.</li> <li><code>key()</code> : returns the value entered by keyboard.</li> <li><code>shift()</code> : returns the value entered by keyboard.</li> <li><code>ctrl()</code> : returns the value entered by keyboard.</li> <li><code>alt()</code> : returns the keyboard input.</li> <li><code>meta()</code> : returns keyboard input.</li> <li><code>test()</code> : returns a message of all keyboard input values (key, Shift, Control, Alt, Meta).</li> </ul>"},{"location":"Events/keyboard-event/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\n@app.page(route=\"/keyboard\")\ndef keyboard_page(data:fs.Datasy):\n    page = data.page\n    on_keyboard = data.on_keyboard_event\n\n    page.title = 'Use Keyboard'\n\n    use_keyboard = ft.Column()\n\n    def show_event():\n        use_keyboard.controls.append(\n            ft.Text(on_keyboard.test())\n        )\n\n        page.update()\n\n    # Add function to be executed by pressing the keyboard.\n    on_keyboard.add_control(show_event)\n\n    return ft.View(\n        route='/keyboard',\n        controls=[\n            ft.Text('Use Keyboard', size=30),\n            use_keyboard\n        ],\n        vertical_alignment=ft.MainAxisAlignment.CENTER,\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER\n    )\n</code></pre>"}]}