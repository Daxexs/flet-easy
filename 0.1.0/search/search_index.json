{"config":{"lang":["en","es"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Home","text":"<p>Flet-Easy is a user-friendly add-on package for Flet, offering a cleaner code structure with numerous customizable features like routers, decorators, route protection and more.</p>"},{"location":"#changelog","title":"Changelog","text":"New features"},{"location":"#v010","title":"v0.1.0","text":"<ul> <li>Easy to use (hence the name).</li> <li>Facilitates <code>flet</code> event handling.</li> <li>Simple page routing (There are three ways) for whichever one suits you best. <code>[See more]</code></li> <li>App construction with numerous pages and custom flet configurations for desktop, mobile and web sites.</li> <li>Provides a better construction of your code, which can be scalable and easy to read (it adapts to your preferences, there are no limitations).</li> <li>Dynamic routing, customization in the routes for greater accuracy in sending data. <code>[See more]</code></li> <li>Routing protection <code>[See more]</code></li> <li>Custom Page 404 <code>[See more]</code></li> <li>Asynchronous support.</li> <li>Working with other applications. <code>[See more]</code></li> <li>Easy integration of <code>on_keyboard_event</code> in each of the pages. <code>[See more]</code></li> <li>Use the percentage of the page width and height of the page with <code>on_resize</code>. <code>[See more]</code></li> <li><code>ResponsiveControlsy</code> control to make the app responsive, useful for desktop applications. <code>[See more]</code></li> <li>Soporta Application Packaging para su distribuci\u00f3n. <code>[See more]</code></li> </ul>"},{"location":"#v011","title":"v0.1.1","text":"<ul> <li>Small improvements in the code.</li> <li>Parameter <code>proctect_route</code> changed to <code>protected_route</code> of <code>page</code> decorator <code>[See more]</code></li> <li>Added functionality to share data between pages in a more controlled way [<code>See more</code>]</li> </ul>"},{"location":"#v013","title":"v0.1.3","text":"<ul> <li>Flet installation is required to use Flet-Easy. <code>[See more]</code></li> <li>Fixed error when running the application with <code>flet v0.21</code></li> <li>Fixed packing when compiling an apk</li> </ul>"},{"location":"begin/","title":"Begin","text":""},{"location":"begin/#flet-easy","title":"Flet-Easy","text":"<p><code>Flet-Easy</code> is a package built as an add-on for <code>Flet</code>, designed for beginners, what it does is to facilitate the use of <code>Flet</code> when building your applications, with a tidier and simpler code.</p>"},{"location":"begin/#features","title":"Features","text":"<ul> <li>Easy to use (hence the name).</li> <li>Facilitates <code>flet</code> event handling.</li> <li>Simple page routing for whichever one suits you best. [<code>See more</code>]</li> <li>App construction with numerous pages and custom flet configurations for desktop, mobile and web sites.</li> <li>Provides a better construction of your code, which can be scalable and easy to read (it adapts to your preferences, there are no limitations).</li> <li>Dynamic routing, customization in the routes for greater accuracy in sending data. [<code>See more</code>]</li> <li>Routing protection [<code>See more</code>]</li> <li>Custom Page 404 [<code>See more</code>]</li> <li>Asynchronous support.</li> <li>Working with other applications. [<code>See more</code>]</li> <li>Easy integration of <code>on_keyboard_event</code> in each of the pages. [<code>See more</code>]</li> <li>Use the percentage of the page width and height of the page with <code>on_resize</code>. [<code>See more</code>]</li> <li><code>ResponsiveControlsy</code> control to make the app responsive, useful for desktop applications. [<code>See more</code>]</li> <li>Soporta Application Packaging para su distribuci\u00f3n. [<code>See more</code>]</li> </ul>"},{"location":"begin/#flet-events-it-handles","title":"Flet events it handles","text":"<ul> <li><code>on_route_change</code> :  Dynamic routing</li> <li><code>on_view_pop</code></li> <li><code>on_keyboard_event</code></li> <li><code>on_resize</code></li> <li><code>on_error</code></li> </ul>"},{"location":"begin/#app-example","title":"App example","text":"<p>Here is an example of an application with 2 pages, \"Home\" and \"Counter\":</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/flet-easy\")\n\n# We add a page\n@app.page(route=\"/flet-easy\")\ndef index_page(data: fs.Datasy):\n    data.page.title = \"Flet-Easy\"\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\"),\n            ft.FilledButton(\"Go to Counter\", key=\"/counter\", on_click=data.go),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We add a second page\n@app.page(route=\"/counter\")\ndef counter_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Counter\"\n\n    txt_number = ft.TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    return ft.View(\n        controls=[\n            ft.Row(\n                [\n                    ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\n                    txt_number,\n                    ft.IconButton(ft.icons.ADD, on_click=plus_click),\n                ],\n                alignment=\"center\",\n            ),\n            ft.FilledButton(\"Go to Home\", key=\"/flet-easy\", on_click=data.go),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We run the application\napp.run()\n</code></pre>"},{"location":"begin/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"data-sharing-between-pages/","title":"Data sharing between pages","text":"<p>Available from version 0.1.3</p> <p>To be able to manipulate the data between client sessions, <code>data.share</code> is used, <code>data</code> is the parameter of the function decorated by <code>page</code>. Unlike <code>page.session</code> this allows a better protection of the data that you want to share in the pages, because through the <code>share_data</code> parameter of the <code>page</code> decorator you can limit to which pages you want to share the data, if the page does not have permission to share the data it will be automatically deleted. The methods to use are similar <code>page.session</code> example.</p> <p>Besides that you get some extra methods:</p> <ul> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul>"},{"location":"data-sharing-between-pages/#example","title":"Example","text":"<p>It can be created in different file.py, for example using the <code>AddPagesy</code> class of <code>Flet-Easy</code> and then added to the main.py file.</p> <p>In this case page #1 creates the data to be shared with the other pages that have the <code>share_data</code> parameter of the <code>page</code> decorator enabled. With that in mind page #3 will not be able to access the shared data, in which case the shared data will be deleted automatically. (This works on pages that redirect continuously, if you switch to a page that does not allow data sharing, it will be deleted).</p> <pre><code>from dataclasses import dataclass\n\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/send-data\")\n\n\n@dataclass\nclass Test:\n    name: int\n    version: str\n\n\n# 1\n@app.page(\"/send-data\", share_data=True)\nasync def send_data_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"send data\"\n\n    data.share.set(\"test\", Test(\"Flet-Easy\", \"0.1\"))\n    data.share.set(\"owner\", \"Daxexs\")\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"data keys: {data.share.get_keys()}\"),\n            ft.Text(f\"data values: {data.share.get_values()}\"),\n            ft.Text(f\"data dict: {data.share.get_all()}\"),\n            ft.ElevatedButton(\n                \"View shared data\",\n                on_click=lambda e: data.go(\"/data\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 2\n@app.page(\"/data\", share_data=True)\nasync def get_data_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"data\"\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}\")\n    else:\n        res = ft.Text(\"No value passed on the page!.\")\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n            ft.ElevatedButton(\n                \"Check the following page for matched data\",\n                on_click=lambda e: data.go(\"/info\")\n            ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 3\n@app.page(\"/info\")\nasync def info_page(data: fs.Datasy):\n    page = data.page\n\n    page.title = \"Information\"\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}\")\n    else:\n        res = ft.Text(\"No value passed on the page!.\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Access to shared data?\"),\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"data-sharing-between-pages/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"dynamic-routes/","title":"Dynamic routes","text":"<p><code>FletEasy</code> provides a simple and powerful routing to manage the access to the pages created, it contains 3 ways of use (choose the one that suits you best).</p>"},{"location":"dynamic-routes/#simple-form","title":"Simple form","text":"<p>Get the values \u200b\u200bof the URL parameters, using the data from the parameters of the function decorated by <code>page()</code>.</p>"},{"location":"dynamic-routes/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id}/user/{name}\")\ndef home_page(data: fs.Datasy, id, name):\n\n    data.page.title = \"Flet-Easy\"\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"dynamic-routes/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"dynamic-routes/#advanced-form","title":"Advanced Form","text":"<p>Use dynamic parameters in the url to get specific data, for example <code>{id:d}</code> is requested to be a number and <code>{name:l}</code> a string. For more information here</p>"},{"location":"dynamic-routes/#example_1","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id:d}/user/{name:l}\")\ndef home_page(data: fs.Datasy, id:int, name:str):\n\n    data.page.title = \"Flet-Easy\"\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"dynamic-routes/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"dynamic-routes/#custom-validation","title":"Custom validation","text":"<p>To control the validation of custom data in the dynamic path, you must use the <code>custom_params</code> parameter of the <code>page</code> decorator, in this you can enter the key and the value as a function, being a dictionary can support a wide variety of data, according to your imagination \ud83e\udd14.</p>"},{"location":"dynamic-routes/#example_2","title":"Example","text":"<pre><code>from uuid import UUID\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/test/10/user/dxs/a4cb5f2a-2281-4e66-85e4-441a40026357\"\n    )\n\ndef is_uuid(value):\n    try:\n        UUID(value)\n        return value\n    except ValueError:\n        return False\n\n@app.page(\n    route=\"/test/{id:d}/user/{name:l}/{uuid:Uuid}\",\n    custom_params={\"Uuid\": is_uuid},\n)\ndef home_page(data: fs.Datasy, id: int, name: str, uuid: UUID):\n    data.page.title = \"Flet-Easy\"\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\\nUUID: {uuid}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"dynamic-routes/#demo_2","title":"\ud83c\udfac Demo","text":""},{"location":"how-to-use/","title":"How to use","text":"<p><code>Flet-Easy</code> presents a structure according to how the user wants to adapt it, since it allows to have several files and connect them to a main file.</p> <ul> <li>To use <code>Flet-easy</code>, first we have to use the <code>FletEasy</code> class and create an object where to make the app configurations.</li> </ul>"},{"location":"how-to-use/#fleteasy","title":"FletEasy","text":"<p>We create the app object, in which you can configure:</p> <ul> <li><code>route_prefix</code> : The route that is different from <code>/</code>.</li> <li><code>route_init</code> : The initial route to initialize the app, by default is <code>/</code>.</li> <li><code>route_login</code> : The route that will be redirected when the app has route protectionconfigured.</li> <li><code>on_Keyboard</code> : Enables the on_Keyboard event, by default it is disabled (False). [<code>See more</code>]</li> <li><code>on_resize</code> : Triggers the on_resize event, by default it is disabled (False). [<code>See more</code>]</li> </ul>"},{"location":"how-to-use/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"how-to-use/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\napp = fs.FletEasy(\n    route_prefix='/FletEasy',\n    route_init='/FletEasy/home',\n)\n</code></pre>"},{"location":"how-to-use/#methods","title":"Methods","text":"<ul> <li><code>run()</code> : Execute the app. [<code>See more</code>]</li> <li><code>run_async()</code> : Execute the app, soporta async. [<code>See more</code>]</li> <li><code>fastapi()</code> : Returns the <code>Flet page</code> object. [<code>See more</code>]</li> <li><code>add_pages()</code> : Add pages from other archives. In the list you enter objects of class AddPagesy from other .py files. [<code>See more</code>]</li> <li><code>add_routes()</code> : Add routes without the use of decorators. [<code>See more</code>]</li> </ul>"},{"location":"how-to-use/#decorators","title":"Decorators","text":"<ul> <li><code>page()</code> : Decorator to add a new page to the app. This decorator method acts similarly to the <code>Pagesy</code> class and contains the same required parameters. [<code>See more</code>]</li> <li><code>config</code> : Decorator to add a custom configuration to the app. [<code>See more</code>]</li> <li><code>login</code> : Decorator to add a login configuration to the app (protected_route). [<code>See more</code>]</li> <li><code>page_404()</code> : Decorator to add a new custom page when not finding a route in the app. [<code>See more</code>]</li> <li><code>view</code> : Decorator to add custom controls to the application, the decorator function will return the <code>Viewsy</code>. Which will be obtained in functions with <code>data:fs.Datasy</code> parameter and can be added to the page view decorated with <code>data.view</code>. [<code>See more</code>]</li> <li><code>config_event_handler</code>: Decorator to add flet page event configurations. [<code>See more</code>]</li> </ul>"},{"location":"how-to-use/#how-to-create-a-new-page","title":"How to create a new page?","text":"<p>To create a new page you use a decorator that provides the object created by the <code>FletEasy</code> class, which is <code>page</code> that allows you to enter certain parameters.</p>"},{"location":"how-to-use/#decorator-page","title":"Decorator <code>page</code>","text":"<p>To add pages, the following parameters are required:</p> <p>In version 0.1.0 <code>protected_route</code> is <code>proctect_route</code></p> <ul> <li><code>route</code>: text string of the url, for example(<code>'/FletEasy'</code>).</li> <li><code>page_clear</code>: Removes the pages from the <code>page.views</code> list of flet (optional).</li> <li><code>protected_route</code>: Protects the page path, according to the <code>login</code> decorator configurationof the <code>FletEasy</code> class (optional). [<code>See more</code>]</li> <li><code>custom_params</code>: To add parameter validation in the custom URL using a dict, where key is the name of the parameter validation and value is the custom function that should return a boolean value.</li> </ul>"},{"location":"how-to-use/#example_1","title":"Example","text":"<pre><code>import flet_easy as fs\nimport flet as ft\n\napp = fs.FletEasy(\n    route_prefix='/FletEasy',\n    route_init='/FletEasy/home',\n)\n\n@app.page(route=\"/home\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n            ft.FilledButton(\n                \"go Dashboard\",\n                key=f\"{data.route_prefix}/dashboard\",\n                on_click=data.go\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n@app.page(route=\"/dashboard\")\ndef dashboard_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Dashboard\"\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n            ft.FilledButton(\n                \"go Home\",\n                on_click=lambda e: data.go(data.route_init)\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"how-to-use/#datasy-data","title":"Datasy (data)","text":"<p>The decorated function will always receive a parameter which is <code>data</code> (can be any name), which will make an object of type <code>Datasy</code> of <code>Flet-Easy</code>.</p> <p>This class has the following attributes, in order to access its data:</p> <ul> <li><code>page</code> : We get the values of the page provided by <code>Flet</code> .</li> <li><code>url_params</code> : We obtain a dictionary with the values passed through the url.</li> <li><code>view</code> : Get a <code>View</code> object from <code>Flet</code>, previouslyconfigured with the <code>View</code> decorator of <code>Flet-Easy</code>.</li> <li><code>route_prefix</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_init</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_login</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> </ul> <p><code>share</code> Available from version 0.1.1</p> <ul> <li><code>share</code> : It is used to be able to store and to obtain values in the client session, theutility is to be able to have greater control in the pages in which it is wanted to share, forit the parameter <code>share_data</code> of the <code>page</code> decorator must be used. The methods to use aresimilar <code>page.session</code>. [<code>See more</code>] Besides that you get some extra methods:</li> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul> <ul> <li><code>on_keyboard_event</code> : get event values to use in the page. [<code>See more</code>]</li> <li><code>on_resize</code> : get event values to use in the page. [<code>See more</code>]</li> </ul>"},{"location":"how-to-use/#methods_1","title":"Methods","text":"<ul> <li><code>logaut() / logaut_async()</code> : method to close sessions of all sections in the browser (client storage), requires as parameter the key or the control (the key parameter of the control must have the value to delete), this is to avoid creating an extra function. [<code>See more</code>]</li> <li><code>update_login() / update_login_async()</code> : Method to create sessions of all sections in the browser (client storage), requires as parameters the key and the value, the same used in the <code>page.client_storage.set</code> method. [<code>See more</code>]</li> <li><code>go() / go_async()</code> : Method to change the application path. (optional)</li> </ul> <p>logaut and login</p> <p>Compatible with android, ios, windows and web.</p>"},{"location":"how-to-use/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"installation/","title":"Installation","text":"<p>Info</p> <p>In version 0.1.3 it requires installing <code>flet</code> separately, in previous versions it is installed by default.</p> <pre><code>pip install flet\n</code></pre> <p>To install flet-easy just copy this into your terminal after having already installed <code>python &gt;= 3.8</code></p> <pre><code>pip install flet-easy\n</code></pre>"},{"location":"responsiveControlsy/","title":"ResponsiveControlsy","text":"<p>Allows the controls to adapt to the size of the app (responsive). It is suitable for use in applications, in web it is not recommended.</p> <p>Note</p> <p>Avoid activating scroll outside ResponseControl.</p> <p>This class contains the following parameters:</p> <ul> <li><code>content: Control</code> : Contains a control of flet.</li> <li><code>expand: int</code> : To specify the space that will contain the content controller in the app, 1 equals the whole app.</li> <li><code>resize_interval: int</code> : To specify the response time (optional).</li> <li><code>on_resize: callable</code> : Custom function to be executed when the app is resized (optional).</li> <li><code>show_resize: bool</code> : To observe the size of the controller (width x * height). is disabled when sending an on_resize function. (optional)</li> <li><code>show_resize_terminal: bool</code> : To see the size of the controller (width x height) in the terminal. (optional)</li> </ul>"},{"location":"responsiveControlsy/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\nfs.ResponsiveControlsy(\n    content=ft.Container(\n        content=ft.Text(\"on_resize\"),\n        bgcolor=ft.colors.RED,\n        alignment=ft.alignment.center,\n        height=100\n    ),\n    expand=1,\n    show_resize=True\n)\n</code></pre>"},{"location":"responsiveControlsy/#advanced-use","title":"Advanced use","text":"<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet.canvas import CanvasResizeEvent\n\napp = fs.FletEasy(\n    route_init=\"/response\"\n)\n\nclass ResponseTest(ft.UserControl):\n    def __init__(self):\n        super().__init__()\n\n    def build(self):\n        return ft.Row(\n            controls=[\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Text(\"W x H\"),\n                        bgcolor=ft.colors.GREEN_400,\n                        alignment=ft.alignment.center,\n                    ),\n                    expand=1,\n                    show_resize=True,\n                ),\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Row(\n                            controls=[\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Column(\n                                            controls=[\n                                                ft.Container(\n                                                    bgcolor=ft.colors.DEEP_ORANGE_50,\n                                                    height=170,\n                                                    margin=5,\n                                                ),\n                                                ft.Container(\n                                                    bgcolor=ft.colors.BLACK87,\n                                                    height=170,\n                                                    margin=5\n                                                ),\n                                            ],\n                                            scroll=ft.ScrollMode.HIDDEN,\n                                            spacing=0,\n                                        ),\n                                        bgcolor=ft.colors.BROWN_500,\n                                        expand=True,\n                                        margin=ft.Margin(5, 5, 0, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Text(\n                                            \"ok\",\n                                        ),\n                                        bgcolor=ft.colors.CYAN_500,\n                                        alignment=ft.alignment.center,\n                                        margin=ft.Margin(0, 5, 5, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                            ],\n                            expand=1,\n                            spacing=0,\n                        ),\n                        bgcolor=ft.colors.AMBER_600,\n                        alignment=ft.alignment.center,\n                    ),\n                    show_resize=True,\n                    expand=3,\n                ),\n            ],\n            expand=2,\n        )\n\n@app.page(route=\"/response\")\ndef response_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Response\"\n\n    def handle_resize(e: CanvasResizeEvent):\n        c = e.control.content\n        t = c.content\n        t.value = f\"{e.width} x {e.height}\"\n        page.update()\n\n    return ft.View(\n        controls=[\n            fs.ResponsiveControlsy(\n                content=ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.RED,\n                    alignment=ft.alignment.center,\n                    height=100,\n                ),\n                expand=1,\n                show_resize=True,\n            ),\n            fs.ResponsiveControlsy(\n                ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.BLUE,\n                    alignment=ft.alignment.center\n                ),\n                on_resize=handle_resize,\n                expand=1,\n            ),\n            fs.ResponsiveControlsy(\n                content=ResponseTest(),\n                expand=2\n                )\n        ],\n    )\n\napp.run()\n</code></pre>"},{"location":"responsiveControlsy/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"run-the-app/","title":"Run the app","text":"<p>To run the application we use an object method already instantiated by <code>FletEasy</code> (you can customize the parameters of method according to your needs):</p>"},{"location":"run-the-app/#methods","title":"Methods","text":""},{"location":"run-the-app/#run","title":"run","text":""},{"location":"run-the-app/#run_async","title":"run_async","text":""},{"location":"run-the-app/#use-with-fastapi","title":"Use with fastapi","text":"<p>To get the main of the app and be able to add Fastapi to it.</p> <p></p>"},{"location":"run-the-app/#customize-as-it-is-executed","title":"customize as it is executed","text":"<p>If there are problems in <code>build web</code></p> <p>Use: <pre><code>import flet as ft\n\nft.app(app.fastapi())\n</code></pre></p>"},{"location":"working-with-other-apps/","title":"Working with other apps","text":""},{"location":"working-with-other-apps/#working-with-other-apps-and-creating-apis","title":"Working with other apps and creating apis","text":"<p>To be able to make our main app work with other apps, besides being able to create apis from the same url path with the same host and port. First we must obtain the main of the app to be able to mount it in another app. For it we are going to use the <code>app.fastapi()</code></p> <p>More information</p> <ul> <li>Here</li> </ul>"},{"location":"working-with-other-apps/#example","title":"Example","text":"main.py<pre><code>import flet as ft\nimport flet_easy as fs\nimport flet_fastapi\n\napp = fs.FletEasy(\n    route_init=\"/Flet-Easy\",\n)\n\n@app.page(route=\"/Flet-Easy\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Flet-Easy\"\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We create an app in FastApi\napp_main = flet_fastapi.FastAPI()\n\n# Creating a basic test api.\n@app_main.get(\"/testing\")\ndef test_api():\n    return {\"success\": True}\n\n# We add the `flet` app to `fastapi`.\napp_main.mount(\"/\", flet_fastapi.app(app.fastapi()))\n</code></pre>"},{"location":"working-with-other-apps/#run-the-app","title":"Run the app","text":"<pre><code>uvicorn main:app_main\n</code></pre>"},{"location":"working-with-other-apps/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"add-pages/by-means-of-functions/","title":"By means of functions","text":""},{"location":"add-pages/by-means-of-functions/#adding-pages-to-the-main-app-without-using-decorators","title":"Adding pages to the main app without using decorators","text":"<p>For this we will require the <code>add_routes</code> method of the object created by the <code>FletEasy</code> class.</p> <p>Soporta async</p>"},{"location":"add-pages/by-means-of-functions/#app-structure","title":"App structure","text":""},{"location":"add-pages/by-means-of-functions/#example-using-functions","title":"Example using functions","text":"index.py<pre><code>import flet_easy as fs\nimport flet as ft\n\ndef page_index(data: fs.Datasy):\n    data.page.title = \"index\"\n\n    return ft.View(\n        controls=[\n            ft.Text('Index'),\n            ft.filledButton(\n                \"Go to test\",\n                key=\"/test\",\n                on_click=data.go\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre> test.py<pre><code>import flet_easy as fs\nimport flet as ft\n\ndef page_test(data: fs.Datasy):\n    data.page.title = \"Test\"\n\n    return ft.View(\n        controls=[\n            ft.Text('Test'),\n            ft.Text(f'Id: {self.id}'),\n            ft.Text(f'Name: {self.name}'),\n            ft.FilledButton(\n                        \"Go index\",\n                        key=\"/index\",\n                        on_click=data.go,\n                    ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n)\n</code></pre>"},{"location":"add-pages/by-means-of-functions/#add-routes","title":"Add routes","text":"<p>We import the functions or classes from the <code>views</code> folder, then we use the <code>add_routes</code> method of the FletEasy instance, in which we will add a list of <code>Pagesy</code> classes where we will configure the routes and the functions or classes to be used in addition to others.</p> main.py<pre><code>import flet_easy as fs\nimport flet as ft\n\n# Import functions from a `views` folder\nfrom views.user import users\nfrom views.index import page_index\nfrom views.test import page_test\n\napp = fs.FletEasy(\n    route_init=\"/index\"\n)\n# Add routes without the use of decorators\napp.add_routes(add_views=[\n    fs.Pagesy('/index', page_index),\n    fs.Pagesy('/user/task', page_users),\n    fs.Pagesy(\n              '/test/{id:d}/user/{name:l}',\n              page_test,\n              protected_route=True\n            ),\n])\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"add-pages/by-means-of-functions/#pagesy","title":"Pagesy","text":"<p>\ud83d\udcd1 The class <code>Pagesy</code>, it requires the following parameters:</p> <p>In version 0.1.0 <code>protected_route</code> is <code>proctect_route</code></p> <p><code>share_data</code> is available from version 0.1.3</p> <ul> <li><code>route</code>: text string of the url, for example(<code>'/index'</code>).</li> <li><code>view</code>: Stores the page function.</li> <li><code>clear</code>: Removes the pages from the <code>page.views</code> list of flet. (optional)</li> <li><code>share_data</code> : It is a boolean value, which is useful if you want to share data between pages, in a morerestricted way. (optional) [<code>See more</code>]</li> <li><code>protected_route</code>: Protects the route of the page, according to the configuration of the <code>login</code> decoratorof the <code>FletEasy</code> class. (optional) [<code>See more</code>]</li> <li><code>custom_params</code>: To add validation of parameters in the custom url using a dictionary, where the key is the nameof the parameter validation and the value is the custom function that must report a boolean value. [<code>See more</code>]</li> </ul>"},{"location":"add-pages/through-decorators/","title":"Through decorators","text":""},{"location":"add-pages/through-decorators/#add-pages-from-other-files-to-the-main-application","title":"Add pages from other files to the main application","text":"<p>In order to create a page in a <code>file.py</code> different from the <code>main.py</code> file of the app, you need to use the <code>AddPagesy</code> class.</p>"},{"location":"add-pages/through-decorators/#addpagesy","title":"<code>AddPagesy</code>","text":"<p>Requires the parameter:</p> <ul> <li><code>route_prefix</code>: text string that will bind to the url of the page decorator, example(/users) this will encompass all urls of this class. (optional)</li> </ul> <p>Methods:</p> <ul> <li><code>page()</code> : Decorator to add a new page to the app. This decorator method acts similarly to the <code>Pagesy</code> class and contains the same required parameters. (<code>See more</code>)</li> </ul> <p>Soporta async</p>"},{"location":"add-pages/through-decorators/#app-structure","title":"App structure","text":"Urls to be created: <ul> <li><code>'/user/task'</code></li> <li><code>'/user/information'</code></li> <li><code>'/user/test'</code></li> </ul>"},{"location":"add-pages/through-decorators/#example-using-functions","title":"Example using functions","text":"user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n# * '/user/test'\n\n@users.page(\"/task\")\ndef task_page(data: fs.Datasy):\n    data.page.title = \"Task\"\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Task\"),\n            ft.FilledButton(\n                            \"Go Information\",\n                            key=\"/user/information\",\n                            on_click=data.go_async,\n                        ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page(\"/information\")\nasync def information_page(data: fs.Datasy):\n    data.page.title = \"Information\"\n\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n            ft.FilledButton(\n                            \"Go Test\",\n                            key=\"/user/test\",\n                            on_click=data.go_async,\n                        ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page(\"/test\")\nasync def page_test(data: fs.Datasy):\n    data.page.title = \"Test\"\n    return ft.View(\n        controls=[\n            ft.Text(\"Test\"),\n            ft.FilledButton(\n                \"Go Task\",\n                key=\"/user/task\",\n                on_click=data.go_async,\n            ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre>"},{"location":"add-pages/through-decorators/#adding-pages","title":"Adding pages","text":"<p>Now how to add to the main app the <code>main.py</code> file. For this we use the <code>add_pages</code> method that requires as parameter a list of all the pages of other files that we want to add.</p> main.py<pre><code>import flet_easy as fs\nfrom views.user import users\n\napp = fs.FletEasy(\n    route_init='/user/task',\n)\n\napp.add_pages([users])\n\napp.run_async()\n</code></pre>"},{"location":"customized-app/control-view-configuration/","title":"Control view configuration","text":""},{"location":"customized-app/control-view-configuration/#add-settings-of-the-view-controller-of-flet","title":"Add settings of the <code>View</code> controller of Flet","text":"<p>Which can be reused in each of the pages through the <code>data:fs.Datasy</code> parameter in the <code>page</code> decorator function of the app.</p> <p>Decorator <code>view</code> to add custom controls to the app, the decorator function will return the <code>Viewsy</code> class from FletEasy. Which will be obtained in functions with parameter <code>data:fs.Datasy</code> and can be added to the page view decorated with <code>page</code> of the FletEasy class.</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</li> <li>Add universal controls to use in more than one page in a simple way.</li> </ul>"},{"location":"customized-app/control-view-configuration/#example","title":"Example","text":"<p>We create an <code>AppBar</code> control of <code>Flet</code>, to be able to be reused in the other pages.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/home\")\n\n@app.view\ndef view(data: fs.Datasy):\n    return fs.Viewsy(\n        appbar=ft.AppBar(\n            title=ft.Text(\"AppBar Example\"),\n            center_title=False,\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            actions=[\n                ft.PopupMenuButton(\n                    items=[\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Home\",\n                            on_click=lambda e: data.go(data.route_init)\n                            ),\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Dasboard\",\n                            on_click=lambda e: data.go(\"/dasboard\")\n                            ),\n                    ]\n                ),\n            ],\n        ),\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/home\", page_clear=True)\ndef home_page(data: fs.Datasy):\n    data.page.title = \"Home\"\n\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text(\"Home\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\", size=50),\n        ],\n        appbar=view.appbar,  # We reuse control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/dasboard\")\ndef dasboard_page(data: fs.Datasy):\n    data.page.title = \"Dasboard\"\n\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text(\"Dasboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Dasboard page\", size=50),\n        ],\n        appbar=view.appbar,  # We reuse control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"customized-app/control-view-configuration/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"customized-app/events/","title":"Events","text":""},{"location":"customized-app/events/#configure-custom-events","title":"Configure custom events","text":"<p><code>config_event_handler</code> decorator to add <code>Flet</code> event configurations. The decorated function must receive the [page:ft.Page] parameter to be able to manipulate the app elements.</p>"},{"location":"customized-app/events/#example","title":"Example","text":"<ul> <li>Handle the event when the app is disconnected</li> </ul> <pre><code>@app.config_event_handler\ndef event_handler(page: ft.Page):\n\n    def on_disconnect(e):\n        print(\"Disconnect test application\")\n\n    page.on_disconnect = on_disconnect\n</code></pre>"},{"location":"customized-app/general-settings/","title":"General settings","text":"<p>This is achieved through the <code>page</code> value provided by <code>Flet</code>. For this you have to use the <code>config</code> decorator of the <code>Flet-Easy</code> object.</p> <p>Decorator to add a custom configuration to the app:</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>page:ft.Page</code>. Which can be used to make universal app configurations.</li> <li>The decorator function does not return anything.</li> </ul>"},{"location":"customized-app/general-settings/#example","title":"Example","text":"<p>In this example we change the page transitions</p> <pre><code>@app.config\ndef config(page: ft.Page):\n    theme = ft.Theme()\n    platforms = [\"android\", \"ios\", \"macos\", \"linux\", \"windows\"]\n    for platform in platforms:  # Removing animation on route change.\n        setattr(theme.page_transitions, platform, ft.PageTransitionTheme.NONE)\n\n    theme.text_theme = ft.TextTheme()\n    page.theme = theme\n</code></pre>"},{"location":"customized-app/page-404/","title":"Page 404","text":"<p>Which will be activated when a page (path) is not found. <code>page_404</code> decorator to add a new custom page when not finding a route in the app, you need the following parameters :</p>"},{"location":"customized-app/page-404/#parameters","title":"parameters","text":"<ul> <li><code>route</code>: text string of the url, for example ('/FletEasy-404'). (optional).</li> <li><code>clear_page</code>: remove the pages from the <code>page.views</code> list of flet. (optional)</li> </ul> <p>The decorated function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</p>"},{"location":"customized-app/page-404/#example","title":"Example","text":"<pre><code>@app.page_404(\"/FletEasy-404\")\ndef page404(data: fs.Datasy):\n    data.page.title = \"Custom 404 error\"\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Custom 404 error\", size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre>"},{"location":"customized-app/route-protection/","title":"Route protection","text":"<p>In order to configure the protection of routes, the <code>login</code> decorator of the created object of the app is used. The utility of this decorator is to obtain the values that we have previously registered in the <code>page.client_storage</code> (more details here), then you can perform validations with a database or any data manager used.</p> <p>Decorator to add a login configuration to the app (<code>protected_route</code>):</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>page:ft.Page</code>. Which can be used to get information and perform universal settings of the app.</li> <li>The decorator function must return a boolean.</li> </ul> <p>In version 0.1.0 <code>protected_route</code> is <code>proctect_route</code></p>"},{"location":"customized-app/route-protection/#example","title":"Example","text":"<p>In this case it is a basic example, with a test on a fictitious database.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\"\n    )\n\ndb = []  # Database\n\n@app.login\ndef login_x(page: ft.Page):\n    username = page.client_storage.get(\"login\")\n\n    \"\"\" We check if a value exists with the key login \"\"\"\n    if username is not None and username in db:\n        \"\"\"We verify if the username that is stored in the browser\n        is in the simulated database.\"\"\"\n        return True\n\n    return False\n\n@app.page(route=\"/dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    data.page.title = \"Dashboard\"\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", key=\"login\", on_click=data.logaut),\n            ft.ElevatedButton(\"Home\", key=\"/login\", on_click=data.go),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/login\")\ndef login_page(data: fs.Datasy):\n    data.page.title = \"Login\"\n\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated database\n\n        \"\"\"First the values must be stored in the browser, then in the login\n        decorator the value must be retrieved through the key used and then\n        validations must be used.\"\"\"\n        data.update_login(key=\"login\", value=username.value)\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dasboard\", key=\"/dashboard\", on_click=data.go),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"customized-app/route-protection/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"customized-app/route-protection/#update_login-update_login_async","title":"update_login / update_login_async","text":"<p>Registering in the client's storage the key and value in all browser sessions.</p> <p>Parameters <code>data.login</code>:</p> <ul> <li><code>key</code> : It is the identifier to store the value in the client storage.</li> <li><code>value</code> : A value that will be stored in the client storage.</li> </ul>"},{"location":"customized-app/route-protection/#logaut-logaut_async","title":"logaut / logaut_async","text":"<p>Closes the sessions of all browser tabs or the device used, which has been previously configured with the <code>login</code> method.</p> Use with <code>on_click</code> <p>If the <code>Flet</code> controls contain the <code>Key</code> parameter, this can act as the identifier for the <code>logaut</code> method.</p> <ul> <li>Or also use <pre><code>on_click=lambda e: data.logaut(&lt;key &gt;)\n</code></pre></li> </ul> <p>Parameters <code>data.logout</code>:</p> <ul> <li><code>key</code> : It is the identifier to store the value in the client storage.</li> </ul>"},{"location":"events/keyboard-event/","title":"Keyboard event","text":"<p>In order to use this method, the parameter of the function decorated by <code>page</code> is obtained through <code>data</code>.</p> <p>Manages keyboard input of values</p>"},{"location":"events/keyboard-event/#methods","title":"Methods","text":"<ul> <li><code>add_control(function: Callable)</code> : Add a controller configuration (method of a class or function), which is executed with the <code>on_keyboard_event</code> event.</li> <li><code>key()</code> : returns the value entered by keyboard.</li> <li><code>shift()</code> : returns the value entered by keyboard.</li> <li><code>ctrl()</code> : returns the value entered by keyboard.</li> <li><code>alt()</code> : returns the keyboard input.</li> <li><code>meta()</code> : returns keyboard input.</li> <li><code>test()</code> : returns a message of all keyboard input values (key, Shift, Control, Alt, Meta).</li> </ul>"},{"location":"events/keyboard-event/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/keyboard\",\n    on_Keyboard=True\n    )\n\n@app.page(route=\"/keyboard\")\ndef keyboard_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Use Keyboard\"\n\n    on_keyboard = data.on_keyboard_event\n\n    use_keyboard = ft.Column()\n\n    def show_event():\n        use_keyboard.controls.append(ft.Text(on_keyboard.test()))\n        page.update()\n\n    # Add function to be executed by pressing the keyboard.\n    on_keyboard.add_control(show_event)\n\n    return ft.View(\n        controls=[\n            ft.Text(\n                \"Use Keyboard\",\n                size=30\n            ),\n            use_keyboard\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"events/keyboard-event/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"events/on-resize/","title":"On resize","text":"<p>In order to use this event, it is obtained from <code>data</code> of the function decorated by <code>page</code>.</p>"},{"location":"events/on-resize/#1-example","title":"1. Example","text":"<pre><code>@app.page(route=\"/resize\", title=\"Use Resize)\ndef resize_page(data:fs.Datasy):\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    return ft.View(\n        controls=[\n            ft.Text('Use Resize', size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre> <p>When we get the values of the event, we can use the methods that this <code>on_resize</code> object has.</p> <ul> <li> <p><code>heightX(&lt;value&gt;)</code> : This method allows to obtain the values of the height of the page, which requires as parameter to enter an integer value from 1 to 100 (100 = 100%).</p> </li> <li> <p><code>widthX(&lt;value&gt;)</code> : This method is similar to the previous one in terms of page width.</p> </li> </ul> <p>Manipulation of the margin or padding of the page, this is important since it allows to use the previous methods correctly, that is to say the margin or padding of the page has to be <code>0</code> so that the previous methods work correctly, in the case that you want to put a margin, customized, you can correct it modifying in margin of <code>on_resize</code>.</p> <p>Note</p> <p>If the <code>AppBar</code> control is used, if the padding is 0, the <code>on_resize</code> margin must be 28 on the y-axis (platform dependent).</p> <ul> <li><code>margin_y</code> : Requires an integer value on the y-axis.</li> <li><code>margin_x</code> : Requires an integer value on the x-axis.</li> </ul>"},{"location":"events/on-resize/#2-example","title":"2. Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/resize\",\n)\n\n@app.page(route=\"/resize\")\ndef resize_page(data:fs.Datasy):\n    data.page.title = \"Use Resize\"\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    # Modifying the customized margin.\n    # on_resize.margin_y = 10\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                bgcolor=ft.colors.GREEN_600,\n                height=on_resize.heightX(50)\n            ),\n            ft.Container(\n                bgcolor=ft.colors.BLUE_600,\n                height=on_resize.heightX(50),\n                width=on_resize.widthX(50)\n            )\n        ],\n        vertical_alignment=\"center\",\n        spacing=0,\n        padding=0, # Customized padding\n    )\n\napp.run()\n</code></pre>"},{"location":"events/on-resize/#demo","title":"\ud83d\udcf7 Demo","text":""}]}